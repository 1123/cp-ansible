all:
  vars:
    ansible_connection: ssh
    ansible_user: ec2-user
    ansible_become: true
    ansible_ssh_private_key_file: /home/ec2-user/.ssh/JumaUK.pem
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

   
    #### SASL Authentication Configuration ####
    ## By default there will be no SASL Authentication
    ## For SASL/PLAIN uncomment this line:
    # sasl_protocol: plain
    ## For SASL/SCRAM uncomment this line:
    # sasl_protocol: scram
    ## For SASL/GSSAPI uncomment this line and see Kerberos Configuration properties below
    # sasl_protocol: kerberos
  

    #### Kerberos Configuration ####
    ## Applicable when sasl_protocol is kerberos
    # kerberos_kafka_broker_primary: <Name of the primary set on the kafka brokers' principal eg. kafka>
    ## REQUIRED: Under each host set keytab file path and principal name, see below
    # kerberos_configure: <Boolean for ansible to install kerberos packages and configure this file: /etc/krb5.conf, defaults to true>
    # kerberos:
    #   realm: <KDC server realm eg. confluent.example.com>
    #   kdc_hostname: <hostname of machine with KDC running eg. ip-172-31-45-82.us-east-2.compute.internal>
    #   admin_hostname: <hostname of machine with KDC running eg. ip-172-31-45-82.us-east-2.compute.internal>

    #### TLS Configuration ####
    ## By default, data will NOT be encrypted. To turn on TLS encryption, uncomment this line
    ssl_enabled: true
    ## By default, the components will be configured with One-Way TLS, to turn on TLS mutual auth, uncomment this line:
    ssl_mutual_auth_enabled: true
    ## By default, the certs for this configuration will be self signed, to deploy custom certificates there are two options.
    ## Option 1: Custom Certs
    ## You will need to provide the path to the Certificate Authority Cert used to sign each hosts' certs
    ## As well as the signed certificate path and the key for that certificate for each host.
    ## These will need to be set for the correct host
    # ssl_custom_certs: true
    # ssl_ca_cert_filepath: "/tmp/certs/ca.crt"
    # ssl_signed_cert_filepath: "/tmp/certs/{{inventory_hostname}}-signed.crt"
    # ssl_key_filepath: "/tmp/certs/{{inventory_hostname}}-key.pem"
    ## Option 2: Custom Keystores and Truststores
    ## CP-Ansible can move keystores/truststores to their corresponding hosts and configure the components to use them. Set These vars
    # ssl_provided_keystore_and_truststore: true
    # ssl_keystore_filepath: "/tmp/certs/{{inventory_hostname}}-keystore.jks"
    # ssl_keystore_key_password: mystorepassword
    # ssl_keystore_store_password: mystorepassword
    # ssl_truststore_filepath: "/tmp/certs/truststore.jks"
    # ssl_truststore_password: truststorepass

    #### Monitoring Configuration ####
    ## Jolokia is enabled by default. The Jolokia jar gets pulled from the internet and enabled on all the components
    ## To disable, uncomment this line:
    # jolokia_enabled: false
    ## During setup, the hosts will download the jolokia agent jar from Maven. To update that jar download set this var
    # jolokia_jar_url: http://<inteneral-server>/jolokia-jvm-1.6.2-agent.jar
    ## JMX Exporter is disabled by default. When enabled, JMX Exporter jar will be pulled from the Internet and enabled on the broker *only*.
    ## To enable, uncomment this line:
    # jmxexporter_enabled: true
    ## To update that jar download set this var
    # jmxexporter_jar_url: http://<internal-server>/jmx_prometheus_javaagent-0.12.0.jar

    #### Custom Yum Repo File (Rhel/Centos) ####
    ## If you are using your own yum repo server to host the packages, in the case of an air-gapped environment,
    ## use the below variables to distribute a custom .repo file to the hosts and skip our repo setup.
    ## Note, your repo server must host all confluent packages
    # custom_yum_repofile: true
    # custom_yum_repofile_filepath: /tmp/my-repo.repo

    #### Custom Apt Repo File (Ubuntu/Debian) ####
    ## If you are using your own apt repo server to host the packages, in the case of an air-gapped environment,
    ## use the below variables to distribute a custom .repo file to the hosts and skip our repo setup.
    ## Note, your repo server must host all confluent packages
    # custom_apt_repo: true
    # custom_apt_repo_filepath: "/tmp/my-source.list"

    #### Confluent Server vs Confluent Kafka ####
    ## Confluent Server will be installed by default, to install confluent-kafka instead, uncomment the below
    # confluent_server_enabled: false

    #### Schema Validation ####
    ## Schema Validation with the kafka configuration is disabled by default. To enable uncomment this line:
    ## Schema Validation only works with confluent_server_enabled: true
    # kafka_broker_schema_validation_enabled: true

    #### Fips Security ####
    ## To enable Fips for added security, uncomment the below line.
    ## Fips only works with ssl_enabled: true and confluent_server_enabled: true
    # fips_enabled: true

    #### Configuring Different Security on both Listeners ####
    ## CP-Ansible will configure two listeners on the broker: an internal listener for the broker to communicate and an external for the components and other clients.
    ## If you only need one listener uncomment this line:
    # kafka_broker_configure_additional_brokers: false
    ## By default both of these listeners will follow whatever you set for ssl_enabled and sasl_protocol.
    ## To configure different security settings on the internal and external listeners set the following variables:
    # kafka_broker_custom_listeners:
    #   internal:
    #     name: INTERNAL
    #     port: 9091
    #     ssl_enabled: false
    #     ssl_mutual_auth_enabled: false
    #     sasl_protocol: none
    #   external:
    #     name: EXTERNAL
    #     port: 9092
    #     ssl_enabled: true
    #     ssl_mutual_auth_enabled: false
    #     sasl_protocol: scram
    ## You can even add additional listeners, make sure all variables are set
    #   client_listener:
    #     name: CLIENT
    #     port: 9093
    #     ssl_enabled: true
    #     ssl_mutual_auth_enabled: true
    #     sasl_protocol: scram

    ## To set custom properties for each service
    ## Find property options in the Confluent Documentation
    # zookeeper:
    #   properties:
    #     initLimit: 6
    #     syncLimit: 3
    # kafka_broker:
    #   properties:
    #     num.io.threads: 15
    # schema_registry:
    #   properties:
    #     key: val
    # control_center:
    #   properties:
    #     key: val
    # kafka_connect:
    #   properties:
    #     key: val
    # kafka_rest:
    #   properties:
    #     key: val
    # ksql:
    #   properties:
    #     key: val

    #### RBAC with  Mutual TLS authentication Configuration with 3 listeners ####
    ##
    ## To Enable RBAC uncomment the following line:
    # rbac_enabled: true
    rbac_enabled: true
    ##
    ## By default we setup 2 listeners, Internal, External, you will need to add a third Token listener as per the following example, under each Broker host
    ## 
    # kafka_broker_custom_listeners:
    #   client_listener:  
    #     name: Token
    #     port: 9093
    #     ssl_enabled: true
    #     ssl_mutual_auth_enabled: true
    #     sasl_protocol: oauth
    ##
    ## Please note, the Token listener is for impersonation only, do not use it for client connections.
    ##
    #### mTLS configuration
    ##
    ## You will need to provide the principal from your certificates, under each Broker in the cluster.  See Broker section for more details.
    ##
    ## You will need to provide the principal mapping rules for the DN within your certificates:
    ##
    # rbac_mtls_internal_map_rule: RULE:^CN=(.*?),OU=TEST.*$/$1/, \
    #   RULE:^CN=(.*?),OU=(.*?),O=(.*?),L=(.*?),ST=(.*?),C=(.*?)$/$1@$2/, \
    #   RULE:^cn=(.*?),ou=(.*?),dc=(.*?),dc=(.*?)$/$1@$2/L, \
    #   RULE:^.*[Cc][Nn]=([a-zA-Z0-9.]*).*$/$1/L, \
    #   DEFAULT
    # rbac_mtls_external_map_rule: ^CN=(.*?),OU=TEST.*$/$1/, \
    #   RULE:^CN=(.*?),OU=(.*?),O=(.*?),L=(.*?),ST=(.*?),C=(.*?)$/$1@$2/, \
    #   RULE:^cn=(.*?),ou=(.*?),dc=(.*?),dc=(.*?)$/$1@$2/L, \
    #   RULE:^.*[Cc][Nn]=([a-zA-Z0-9.]*).*$/$1/L, \
    #   DEFAULT
    rbac_mtls_internal_map_rule: | 
      RULE:^CN=(.*?),OU=TEST.*$/$1/, \
      RULE:^CN=(.*?),OU=(.*?),O=(.*?),L=(.*?),ST=(.*?),C=(.*?)$/$1@$2/, \
      RULE:^cn=(.*?),ou=(.*?),dc=(.*?),dc=(.*?)$/$1@$2/L, \
      RULE:^.*[Cc][Nn]=([a-zA-Z0-9.]*).*$/$1/L, \
      DEFAULT
    rbac_mtls_external_map_rule: |
      RULE:^CN=(.*?),OU=TEST.*$/$1/, \
      RULE:^CN=(.*?),OU=(.*?),O=(.*?),L=(.*?),ST=(.*?),C=(.*?)$/$1@$2/, \
      RULE:^cn=(.*?),ou=(.*?),dc=(.*?),dc=(.*?)$/$1@$2/L, \
      RULE:^.*[Cc][Nn]=([a-zA-Z0-9.]*).*$/$1/L, \
      DEFAULT
    ##
    #### OAuth configuration
    ##
    ## For impersonation to take place, you will need to supply a private and public pem file for token generation.  Please see the documentation for
    ## further details.
    ##
    # rbac_mtls_public_pem_path: /home/ec2-user/keys/
    # rbac_mtls_public_pem_name: public.pem
    # rbac_mtls_private_pem_path: /home/ec2-user/keys/ 
    # rbac_mtls_private_pem_name: tokenKeypair.pem
    rbac_mtls_public_pem_path: /home/ec2-user/keys/
    rbac_mtls_public_pem_name: public.pem
    rbac_mtls_private_pem_path: /home/ec2-user/keys/ 
    rbac_mtls_private_pem_name: tokenKeypair.pem
    ##
    #### MDS Configuration
    ##
    ## You will need to specify a super user name for user creation.
    ##
    # rbac_mtls_broker_admin: <Your desired admin name>
    rbac_mtls_broker_admin: mds 
    ##
    ## You also need to specify a username and password for each component you wish to install.  These users must exist in LDAP.
    ##
    # rbac_mtls_schema_registry_user: schema
    # rbac_mtls_schema_registry_user_password: password
    rbac_mtls_schema_registry_user: schema-registry 
    rbac_mtls_schema_registry_user_password: password
    rbac_mtls_connect_user: connect
    rbac_mtls_connect_user_password: password
    rbac_mtls_rest_proxy_user: rest-proxy
    rbac_mtls_rest_proxy_user_password: password
    rbac_mtls_c3_user: c3
    rbac_mtls_c3_user_password: password 
    ##
    # rbac_mtls_connect_user: connect
    # rbac_mtls_connect_user_password: password 
    ##
    ## You will also need to specify your Schema Registry Cluster ID if using Schema Registry:
    ##
    # schema_registry_cluster_id: 
    ##
    ## You will also need to specify your Kafka Connect Cluster ID if using Kafka Connect:
    ##
    # kafka_connect_cluster_id:
    ##
    #### LDAP Configuration 
    ##
    ## You will need to specify the following authentication and lookup details for your LDAP server in order for RBAC to lookup and validate users.
    ##
    # rbac_mtls_ldap_url: <URL for LDAP server>
    # rbac_mtls_ldap_port: <Port number or LDAP server, typically 389>
    # rbac_mtls_ldap_principal: <Principal for authenticating to LDAP server>
    # rbac_mtls_ldap_princiapl_password: <Password for LDAP server principal>
    # rbac_mtls_ldap_user_search_base: <User search base dn, eg. CN=Users,DC=qe,DC=confluent,DC=io>
    # rbact_mtls_ldap_group_search_base: <Group search base dn, eg. CN=Users,DC=qe,DC=confluent,DC=io>

    # rbac_mtls_ldap_url: ip-10-0-0-196.eu-west-2.compute.internal
    # rbac_mtls_ldap_port: 389
    # rbac_mtls_ldap_principal: mds
    # rbac_mtls_ldap_princiapl_password: password
    # rbac_mtls_ldap_user_search_base: OU=rbac,DC=example,DC=com
    # rbact_mtls_ldap_group_search_base: OU=rbac,DC=example,DC=com
    
    rbac_mtls_ldap_url: ip-10-0-0-36.eu-west-2.compute.internal
    rbac_mtls_ldap_port: 389
    rbac_mtls_ldap_principal: mds
    rbac_mtls_ldap_princiapl_password: password
    rbac_mtls_ldap_user_search_base: OU=rbac,DC=example,DC=com
    rbact_mtls_ldap_group_search_base: OU=rbac,DC=example,DC=com



    ##
    ## If you are using LDAPS, please also specify the following:
    ##
    # rbac_mtls_ldap_public_key: <path to your public key>

zookeeper:
  hosts:
    ip-10-0-0-97.eu-west-2.compute.internal:
      ## By default the first host will get zookeeper id=1, second gets id=2. Set zookeeper_id to customize
      # zookeeper_id: 2
      
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # zookeeper_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/zookeeper-ip-172-31-34-246.us-east-2.compute.internal.keytab>
      # zookeeper_kerberos_principal: <The principal configured in kdc server, eg. zookeeper/ip-172-31-34-246.us-east-2.compute.internal@REALM.EXAMPLE.COM>
    ip-10-0-0-183.eu-west-2.compute.internal:
      # zookeeper_id: 3
    ip-10-0-0-117.eu-west-2.compute.internal:
      # zookeeper_id: 1
kafka_broker:
  hosts:
    ip-10-0-0-52.eu-west-2.compute.internal:
      ## By default the first host will get broker id=1, second gets id=2. Set broker_id to customize
      # broker_id: 3
      kafka_broker_custom_listeners:
        client_listener:  
          name: Token
          port: 9093
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: OAUTH
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # kafka_broker_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/ip-172-31-34-246.us-east-2.compute.internal>
      # kafka_broker_kerberos_principal: <The principal configured in kdc server, eg. kafka/ip-172-31-34-246.us-east-2.compute.internal@REALM.EXAMPLE.COM>
      
      ## For mTLS with RBAC when providing your own certificates or keystore/truststore, you will need to set the following variable with your certificates principal name:
      # rbac_mtls_principal_name: <The Principal name in your certificate (DN)>
    ip-10-0-0-72.eu-west-2.compute.internal:
      # broker_id: 2
      kafka_broker_custom_listeners:
        client_listener:  
          name: Token
          port: 9093
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: OAUTH
    ip-10-0-0-47.eu-west-2.compute.internal:
      # broker_id: 1
      kafka_broker_custom_listeners:
        client_listener:  
          name: Token
          port: 9093
          ssl_enabled: true
          ssl_mutual_auth_enabled: true
          sasl_protocol: OAUTH
schema_registry:
  hosts:
    ip-10-0-0-51.eu-west-2.compute.internal:
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # schema_registry_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/schemaregistry-ip-172-31-34-246.us-east-2.compute.internal
      # schema_registry_kerberos_principal: The principal configured in kdc server ex: schemaregistry/ip-172-31-34-246.us-east-2.compute.internal@REALM.EXAMPLE.COM>
kafka_connect:
  hosts:
    ip-10-0-0-80.eu-west-2.compute.internal:
    ip-10-0-0-81.eu-west-2.compute.internal:
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # kafka_connect_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/connect-ip-172-31-34-246.us-east-2.compute.internal
      # kafka_connect_kerberos_principal: The principal configured in kdc server ex: connect/ip-172-31-34-246.us-east-2.compute.internal@REALM.EXAMPLE.COM>
kafka_rest:
  hosts:
    ip-10-0-0-167.eu-west-2.compute.internal:
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # kafka_rest_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/restproxy-ip-172-31-34-246.us-east-2.compute.internal
      # kafka_rest_kerberos_principal: The principal configured in kdc server ex: restproxy/ip-172-31-34-246.us-east-2.compute.internal@REALM.EXAMPLE.COM>
ksql:
  hosts:
    ip-10-0-0-217.eu-west-2.compute.internal:
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # ksql_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/ksql-ip-172-31-37-15.us-east-2.compute.internal
      # ksql_kerberos_principal: The principal configured in kdc server ex: ksql/ip-172-31-37-15.us-east-2.compute.internal@REALM.EXAMPLE.COM>
control_center:
  hosts:
    ip-10-0-0-218.eu-west-2.compute.internal:
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # control_center_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/controlcenter-ip-172-31-37-15.us-east-2.compute.internal
      # control_center_kerberos_principal: The principal configured in kdc server ex: controlcenter/ip-172-31-37-15.us-east-2.compute.internal@REALM.EXAMPLE.COM>
