- set_fact:
      principal_name: "{{inventory_hostname}}"
  when: rbac_enabled|bool and not ssl_custom_certs|bool

- set_fact:
      principal_name: "{{rbac_principal_name}}"
  when: rbac_enabled|bool and ssl_custom_certs|bool

- name: Create pem file Directory
  file:
    path: "{{rbac_enabled_public_pem_path}}"
    group: "{{kafka_broker_group}}"
    mode: '650'
    recurse: yes

- name: Copy in public pem files
  copy:
    src: "{{token_services_public_pem_file}}"
    dest: "{{rbac_enabled_public_pem_path}}"
    mode: '755'
    owner: "{{kafka_broker_user}}"
    group: "{{kafka_broker_group}}"

- name: Get Kafka Cluster ID from Zookeeper
  shell: /bin/zookeeper-shell localhost:2181 get /cluster/id | grep version
  delegate_to: "{{ groups['zookeeper'][0] }}"
  register: cluster_id_query

- set_fact:
    cluster_id_json: "{{ cluster_id_query.stdout }}"

- name: Set cluster_id Variable
  set_fact:
    cluster_id: "{{ cluster_id_json.id }}"

- name: export CA to pem format for MDS login to create user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
    openssl pkcs12 -in /var/ssl/private/kafka_broker.truststore.jks \
      -out /var/ssl/private/kafka_broker.truststore.pem \
      -passin pass:{{kafka_broker_truststore_storepass}} -passout pass:{{kafka_broker_truststore_storepass}}
 
- name: convert keystore to pem format
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
    keytool -importkeystore -srckeystore /var/ssl/private/kafka_broker.keystore.jks  -destkeystore /var/ssl/private/kafka_broker.keystore.p12 -deststoretype PKCS12 -deststorepass {{kafka_broker_keystore_storepass}} -destkeypass {{kafka_broker_keystore_storepass}}

- name: export certificate from pem
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
    openssl pkcs12 -in /var/ssl/private/kafka_broker.keystore.p12 \
      -out /var/ssl/private/cert.pem \
      -passin pass:{{kafka_broker_keystore_storepass}} -passout pass:{{kafka_broker_keystore_storepass}}

- name: export private key from pem 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
    openssl pkcs12 -in /var/ssl/private/kafka_broker.keystore.p12 \
      -out /var/ssl/private/key.pem \
      -passin pass:{{kafka_broker_keystore_storepass}} -passout pass:{{kafka_broker_keystore_storepass}}

- name: Login to MDS to get Security Token
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl --cacert /var/ssl/private/kafka_broker.truststore.pem --key /var/ssl/private/key.pem --cert  -u "{{mds_super_user}}":"{{mds_super_user_password}}" -s https://"{{ groups['kafka_broker'][0] }}":8090/security/1.0/authenticate 2> /dev/null | grep auth_token
  register: rbac_token_query

- set_fact:
    rbac_token_json: "{{ rbac_token_query.stdout }}"

- name: Set rbac_token Variable
  set_fact:
    rbac_token: "{{ rbac_token_json }}"