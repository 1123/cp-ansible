---
- name: Create Backup Directory
  file:
    # TODO configurable
    path: "/tmp/upgrade/{{ service_name }}"
    state: directory
    mode: 0640

- set_fact:
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

- name: Backup Configuration files
  copy:
    src: "{{ item }}"
    remote_src: true
    dest: "/tmp/upgrade/{{ service_name }}/{{ item | basename }}-{{timestamp}}"
  loop: "{{ backup_files }}"

- name: Stop Service
  systemd:
    name: "{{ service_name }}"
    state: stopped

- block:
    - name: Remove the Packages - Red Hat
      yum:
        name: "{{item}}"
        state: absent
      loop: "{{ packages }}"

    - name: Remove Confluent Dist Yum Repo
      yum_repository:
        name: Confluent.dist
        state: absent

    - name: Remove Confluent Yum Repo
      yum_repository:
        name: Confluent
        state: absent
  when: ansible_os_family == "RedHat"

- block:
    - name: Install the Packages - Debian
      apt:
        name: "{{item}}{{confluent_package_debian_suffix}}"
        state: absent
      loop: "{{ packages }}"

    - name: Add Confluent Apt Key
      apt_key:
        url: "{{confluent_common_repository_debian_key_url}}"
        state: absent

    - name: Add Confluent Apt Repo
      apt_repository:
        repo: "{{confluent_common_repository_debian_repository}}"
        state: absent
  when: ansible_os_family == "Debian"

- name: Configure Repositories
  import_role:
    name: confluent.common
  vars:
    install_java: false

- name: Install the Packages - Red Hat
  yum:
    name: "{{item}}{{confluent_package_redhat_suffix}}"
    state: latest
  loop: "{{ packages }}"
  when: ansible_os_family == "RedHat"

- name: Install the Packages - Debian
  apt:
    name: "{{item}}{{confluent_package_debian_suffix}}"
  loop: "{{ packages }}"
  when: ansible_os_family == "Debian"

- name: Put back configuration
  copy:
    dest: "{{ item }}"
    remote_src: true
    src: "/tmp/upgrade/{{ service_name }}/{{ item | basename }}-{{timestamp}}"
  loop: "{{ restore_files }}"

- name: Restart Service
  systemd:
    daemon_reload: true
    name: "{{ service_name }}"
    state: restarted
