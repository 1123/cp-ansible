---
kerberos:
  keytab_dir: /etc/security/keytabs

confluent_repo_version: 5.5
confluent_package_version: 5.5.0
confluent_full_package_version: "{{ confluent_package_version + '-1' }}"
confluent_package_redhat_suffix: "{{ '-' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"
confluent_package_debian_suffix: "{{ '=' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"

confluent:
  support:
    # customer_id: anonymous
    metrics_enabled: true

jolokia_enabled: true
jolokia_jar_path: /opt/jolokia/jolokia.jar

jmxexporter_enabled: false
jmxexporter_jar_path: /opt/prometheus/jmx_prometheus_javaagent.jar

fips_enabled: false
fips_jar_path: /usr/share/java/kafka/bc-fips-1.0.1.jar
fips_provider_class: org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider
pkcs12_enabled: "{{ true if fips_enabled|bool else false }}"

custom_log4j: true
custom_yum_repofile: false
custom_apt_repo: false
kerberos_configure: true

open_file_limit: 500000

confluent_server_enabled: true

health_checks_enabled: true

common_role_completed: false

proxy_env: {}

# Other options: kerberos, plain, scram
sasl_protocol: none

ssl_enabled: false
ssl_mutual_auth_enabled: false

regenerate_ca: true
regenerate_keystore_and_truststore: true
certs_updated: false

ssl_provided_keystore_and_truststore: false
ssl_custom_certs: false
# With self_signed on and ssl_enabled off, self_signed var should not get honored
self_signed: "{{ false if ssl_provided_keystore_and_truststore|bool or ssl_custom_certs|bool else true }}"
ssl_self_signed_ca_cert_filename: snakeoil-ca-1.crt
ssl_self_signed_ca_key_filename: snakeoil-ca-1.key
ssl_self_signed_ca_password: capassword123

# Zookeeper Variables
zookeeper_user: "{{zookeeper_default_user}}"
zookeeper_group: "{{zookeeper_default_group}}"
zookeeper_sasl_protocol: "{{sasl_protocol if sasl_protocol == 'kerberos' else 'none'}}"
# Variable only used by Kafka for the time being, health checks/components will use 2181
zookeeper_client_port: "{{'2182' if zookeeper_ssl_enabled|bool else '2181'}}"
# TODO set these equal to ssl_enabled and ssl_mutual_auth_enabled on next version increase
zookeeper_ssl_enabled: false
zookeeper_ssl_mutual_auth_enabled: false
zookeeper_truststore_path: "/var/ssl/private/zookeeper.truststore.jks"
zookeeper_keystore_path: "/var/ssl/private/zookeeper.keystore.jks"
zookeeper_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
zookeeper_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
zookeeper_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}"
zookeeper_ca_cert_path: "/var/ssl/private/ca.crt"
zookeeper_cert_path: "/var/ssl/private/zookeeper.crt"
zookeeper_key_path: "/var/ssl/private/zookeeper.key"
zookeeper:
  log4j_file: /etc/kafka/zookeeper_log4j.properties
  jaas_file: /etc/kafka/zookeeper_jaas.conf

zookeeper_jolokia_enabled: "{{jolokia_enabled}}"
zookeeper_jolokia_port: 7770

zookeeper_jmxexporter_enabled: "{{jmxexporter_enabled}}"
zookeeper_jmxexporter_config_path: /opt/prometheus/zookeeper.yml
zookeeper_jmxexporter_port: 8079

zookeeper_health_check_command: "exec 42<>/dev/tcp/127.0.0.1/{{zookeeper_final_properties.clientPort}}; echo -e 'srvr' >&42; cat <&42"

zookeeper_current_node_hostname: "{{ inventory_hostname }}"
zookeeper_peer_port: 2888
zookeeper_leader_port: 3888

zookeeper_properties:
  defaults:
    enabled: true
    properties:
      clientPort: 2181
      maxClientCnxns: 0
      initLimit: 5
      syncLimit: 2
      autopurge.snapRetainCount: 10
      autopurge.purgeInterval: 1
      dataDir: /var/lib/zookeeper
      admin.enableServer: "false"
  ssl:
    enabled: "{{zookeeper_ssl_enabled}}"
    properties:
      secureClientPort: "{{zookeeper_client_port}}"
      serverCnxnFactory: org.apache.zookeeper.server.NettyServerCnxnFactory
      authProvider.x509: org.apache.zookeeper.server.auth.X509AuthenticationProvider
      ssl.keyStore.location: "{{zookeeper_keystore_path}}"
      ssl.keyStore.password: "{{zookeeper_keystore_storepass}}"
      ssl.trustStore.location: "{{zookeeper_truststore_path}}"
      ssl.trustStore.password: "{{zookeeper_truststore_storepass}}"
      sslQuorum: "true"
      ssl.quorum.keyStore.location: "{{zookeeper_keystore_path}}"
      ssl.quorum.keyStore.password: "{{zookeeper_keystore_storepass}}"
      ssl.quorum.trustStore.location: "{{zookeeper_truststore_path}}"
      ssl.quorum.trustStore.password: "{{zookeeper_truststore_storepass}}"
      ssl.clientAuth: "{{ 'need' if zookeeper_ssl_mutual_auth_enabled|bool else 'none' }}"
  sasl:
    enabled: "{{ zookeeper_sasl_protocol in ['kerberos', 'digest'] }}"
    properties:
      authProvider.sasl: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
  sasl_kerberos:
    enabled: "{{ zookeeper_sasl_protocol == 'kerberos' }}"
    properties:
      kerberos.removeHostFromPrincipal: 'true'
      kerberos.removeRealmFromPrincipal: 'true'
  servers:
    enabled: true
    properties: "{{ zookeeper_servers | split_to_dict }}"

zookeeper_servers: "{% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}server.{{ hostvars[host]['zookeeper_id'] | default(groups.zookeeper.index(host) + 1)}}={{ zookeeper_current_node_hostname if host == inventory_hostname else host }}:{{zookeeper_peer_port}}:{{zookeeper_leader_port}}{% endfor %}"

zookeeper_combined_properties: "{{ zookeeper_properties | combine_properties }}"

zookeeper_custom_properties: {}
zookeeper_final_properties: "{{ zookeeper_combined_properties | combine(zookeeper_custom_properties) }}"

# Kafka Broker Variables
kafka_broker_default_listeners:
  internal:
    name: INTERNAL
    port: 9092
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ 'OAUTH' if rbac_enabled|bool else sasl_protocol }}"

kafka_broker_custom_listeners:
  broker:
    name: BROKER
    port: 9091
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"

kafka_broker_configure_additional_brokers: true
kafka_broker_listeners: "{{ kafka_broker_default_listeners | combine(kafka_broker_custom_listeners, recursive=True) if kafka_broker_configure_additional_brokers|bool else  kafka_broker_default_listeners}}"
kafka_broker_inter_broker_listener_name: "{{ 'broker' if kafka_broker_configure_additional_brokers|bool else 'internal' }}"

# Uses custom filter to create a list of all sasl_protocols, removes ['none'], and reduces to unique items
kafka_broker_sasl_enabled_mechanisms: "{{ kafka_broker_listeners | get_sasl_mechanisms(sasl_protocol) | difference(['none']) | unique }}"

kafka_broker_user: "{{kafka_broker_default_user}}"
kafka_broker_group: "{{kafka_broker_default_group}}"
kafka_broker_truststore_path: "/var/ssl/private/kafka_broker.truststore.jks"
kafka_broker_keystore_path: "/var/ssl/private/kafka_broker.keystore.jks"
kafka_broker_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_broker_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_broker_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_broker_keystore_storepass }}"
kafka_broker_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_broker_cert_path: "/var/ssl/private/kafka_broker.crt"
kafka_broker_key_path: "/var/ssl/private/kafka_broker.key"
kafka_broker:
  log4j_file: /etc/kafka/kafka_server_log4j.properties
  jaas_file: /etc/kafka/kafka_server_jaas.conf

kafka_broker_schema_validation_enabled: false

kafka_broker_jolokia_enabled: "{{jolokia_enabled}}"
kafka_broker_jolokia_port: 7771
kafka_broker_jolokia_ssl_enabled: "{{ ssl_enabled }}"
kafka_broker_jolokia_java_arg_ssl_addon: ",keystore={{kafka_broker_keystore_path}},keystorePassword={{kafka_broker_keystore_storepass}},protocol=https"
kafka_broker_jolokia_urp_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions"
kafka_broker_jolokia_active_controller_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ActiveControllerCount"

kafka_broker_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_broker_jmxexporter_config_path: /opt/prometheus/kafka.yml
kafka_broker_jmxexporter_port: 8080

kafka_broker_default_interal_replication_factor: "{{ [ groups['kafka_broker'] | length, 3 ] | min }}"

kafka_broker_metrics_reporter_enabled: true

kafka_broker_properties:
  defaults:
    enabled: true
    properties:
      group.initial.rebalance.delay.ms: 0
      log.retention.check.interval.ms: 300000
      log.retention.hours: 168
      log.segment.bytes: 1073741824
      num.io.threads: 16
      num.network.threads: 8
      num.partitions: 1
      num.recovery.threads.per.data.dir: 2
      offsets.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      socket.receive.buffer.bytes: 102400
      socket.request.max.bytes: 104857600
      socket.send.buffer.bytes: 102400
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      zookeeper.connection.timeout.ms: 18000
      confluent.license.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      confluent.metadata.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
      confluent.support.metrics.enable: "{{confluent.support.metrics_enabled|bool|lower}}"
      # TODO dont need one to one mapping of vars...
      confluent.support.customer.id: anonymous
      # TODO see if join filter would work here
      zookeeper.connect: "{% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper_client_port}}{% endfor %}"
      log.dirs: /var/lib/kafka/data
      # broker.id: "{{ broker_id | default(groups.kafka_broker.index(inventory_hostname) + 1)}}"
      listener.security.protocol.map: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}:{{ listener['value'] | kafka_protocol_defaults(ssl_enabled, sasl_protocol)}}{% endfor %}"
      listeners: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://:{{ listener['value']['port'] }}{% endfor %}"
      advertised.listeners: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://{{ listener['value']['hostname'] | default(inventory_hostname) }}:{{ listener['value']['port'] }}{% endfor %}"
      inter.broker.listener.name: "{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['name']}}"
  broker_id:
    enabled: "{{ inventory_hostname in groups.kafka_broker }}"
    properties:
      # broker.id logic depends on inventory hostname being in kafka_broker host list, defaulting to 0 if non kafka host
      broker.id: "{{ broker_id | default( groups.kafka_broker.index(inventory_hostname) + 1 ) if inventory_hostname in groups.kafka_broker else 0 }}"
  fips:
    enabled: "{{fips_enabled}}"
    properties:
      enable.fips: 'true'
      security.providers: io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator
  inter_broker_sasl:
    enabled: "{{ kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol != 'none' }}"
    properties:
      sasl.mechanism.inter.broker.protocol: "{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol}}"
  sasl_enabled:
    enabled: "{{ kafka_broker_sasl_enabled_mechanisms|length > 0 }}"
    properties:
      sasl.enabled.mechanisms: "{% for mechanism in kafka_broker_sasl_enabled_mechanisms %}{% if loop.index > 1%},{% endif %}{{ mechanism|upper }}{% endfor %}"
  sasl_gssapi:
    enabled: "{{ 'GSSAPI' in kafka_broker_sasl_enabled_mechanisms }}"
    properties:
      sasl.kerberos.service.name: "{{kerberos_kafka_broker_primary | default('kafka')}}"
  zk_ssl:
    enabled: "{{ zookeeper_ssl_enabled }}"
    properties:
      zookeeper.ssl.client.enable: 'true'
      zookeeper.clientCnxnSocket: org.apache.zookeeper.ClientCnxnSocketNetty
      zookeeper.ssl.truststore.location: '{{kafka_broker_truststore_path}}'
      zookeeper.ssl.truststore.password: '{{kafka_broker_truststore_storepass}}'
  zk_mtls:
    enabled: "{{ zookeeper_ssl_mutual_auth_enabled }}"
    properties:
      zookeeper.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      zookeeper.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
  zk_acls:
    enabled: "{{ zookeeper_sasl_protocol in ['kerberos', 'digest'] }}"
    properties:
      zookeeper.set.acl: 'true'
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      confluent.schema.registry.url: "{% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      confluent.schema.registry.ssl.truststore.location: "{{kafka_broker_truststore_path}}"
      confluent.schema.registry.ssl.truststore.password: "{{kafka_broker_truststore_storepass}}"
      confluent.schema.registry.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      confluent.schema.registry.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
      confluent.schema.registry.ssl.key.password: "{{kafka_broker_keystore_keypass}}"
  rbac:
    enabled: "{{ rbac_enabled }}"
    properties:
      confluent.metadata.server.listeners: "{{mds_http_protocol}}://0.0.0.0:{{mds_port}}"
      confluent.metadata.server.advertised.listeners: "{{mds_http_protocol}}://{{ mds_advertised_listener_hostname | default(inventory_hostname) }}:{{mds_port}}"
      confluent.metadata.server.token.auth.enable: "true"
      confluent.metadata.server.token.max.lifetime.ms: 3600000
      confluent.metadata.server.token.key.path: "{{rbac_enabled_private_pem_path}}"
      confluent.metadata.server.public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.server.token.signature.algorithm: RS256
      confluent.metadata.server.authentication.method: BEARER
      authorizer.class.name: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      confluent.authorizer.access.rule.providers: CONFLUENT,ZK_ACL
      confluent.authorizer.group.provider: CONFLUENT
      # TODO super users logic needs updating
      # super.users={{super_users | join(';')}}
  mds_ssl:
    enabled: "{{ mds_ssl_enabled }}"
    properties:
      confluent.metadata.server.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      confluent.metadata.server.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
      confluent.metadata.server.ssl.key.password: "{{kafka_broker_keystore_keypass}}"
  mds_mtls:
    enabled: "{{ mds_ssl_mutual_auth_enabled }}"
    properties:
      confluent.metadata.server.ssl.truststore.location: "{{kafka_broker_truststore_path}}"
      confluent.metadata.server.ssl.truststore.password: "{{kafka_broker_truststore_storepass}}"
      confluent.metadata.server.ssl.client.auth: "true"
  listeners:
    enabled: true
    properties: "{{ kafka_broker_listeners | listener_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass,
                            plain_jaas_config, kerberos.keytab_dir, kafka_broker_kerberos_keytab_path|default('kafka.keytab')|basename, kafka_broker_kerberos_principal|default('kafka'),
                            sasl_scram_users.admin.principal, sasl_scram_users.admin.password, rbac_enabled_public_pem_path ) }}"
  metrics_reporter:
    enabled: "{{kafka_broker_metrics_reporter_enabled}}"
    properties:
      metric.reporters: io.confluent.metrics.reporter.ConfluentMetricsReporter
      confluent.metrics.reporter.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['port']}}{% endfor %}"
      confluent.metrics.reporter.topic.replicas: "{{kafka_broker_default_interal_replication_factor}}"
  metrics_reporter_client:
    enabled: "{{kafka_broker_metrics_reporter_enabled}}"
    # filter expects all params to be defined, some have dummy defaults
    properties: "{{ kafka_broker_listeners[kafka_broker_inter_broker_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.metrics.reporter.', kafka_broker_truststore_path, kafka_broker_truststore_storepass, kafka_broker_keystore_path, kafka_broker_keystore_storepass, kafka_broker_keystore_keypass,
                            false, sasl_plain_users.admin.principal, sasl_plain_users.admin.password, sasl_scram_users.admin.principal, sasl_scram_users.admin.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_broker_kerberos_keytab_path|default('kafka.keytab')|basename, kafka_broker_kerberos_principal|default('kafka'),
                            'user', 'pass', mds_urls) }}"


kafka_broker_custom_properties: {}

kafka_broker_combined_properties: "{{kafka_broker_properties | combine_properties}}"

kafka_broker_final_properties: "{{ kafka_broker_combined_properties | combine(kafka_broker_custom_properties) }}"

# Need complex jinja templating here, to be used by kafka broker listeners
plain_jaas_config: |-
  org.apache.kafka.common.security.plain.PlainLoginModule required username="{{sasl_plain_users.admin.principal}}" password="{{sasl_plain_users.admin.password}}" {% for user in sasl_plain_users|dict2items %} user_{{ user['value']['principal'] }}="{{ user['value']['password'] }}"{% endfor %};


# Schema Registry Variables
schema_registry_user: "{{schema_registry_default_user}}"
schema_registry_group: "{{schema_registry_default_group}}"
schema_registry_listener_port: 8081
schema_registry_ssl_enabled: "{{ssl_enabled}}"
schema_registry_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
schema_registry_http_protocol: "{{ 'https' if schema_registry_ssl_enabled|bool else 'http' }}"
schema_registry_truststore_path: "/var/ssl/private/schema_registry.truststore.jks"
schema_registry_keystore_path: "/var/ssl/private/schema_registry.keystore.jks"
schema_registry_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
schema_registry_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
schema_registry_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}"
schema_registry_ca_cert_path: "/var/ssl/private/ca.crt"
schema_registry_cert_path: "/var/ssl/private/schema_registry.crt"
schema_registry_key_path: "/var/ssl/private/schema_registry.key"
schema_registry_kafka_listener_name: internal
schema_registry:
  log4j_file: /etc/schema-registry/schema_registry_log4j.properties

schema_registry_jolokia_enabled: "{{jolokia_enabled}}"
schema_registry_jolokia_port: 7772
schema_registry_jolokia_ssl_enabled: "{{ schema_registry_ssl_enabled }}"

schema_registry_properties:
  defaults:
    enabled: true
    properties:
      debug: 'false'
      schema.registry.group.id: schema-registry
      kafkastore.topic: _schemas
      listeners: "{{schema_registry_http_protocol}}://0.0.0.0:{{schema_registry_listener_port}}"
      host.name: "{{inventory_hostname}}"
      inter.instance.protocol: "{{schema_registry_http_protocol}}"
      kafkastore.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[schema_registry_kafka_listener_name]['port']}}{% endfor %}"
  ssl:
    enabled: "{{schema_registry_ssl_enabled}}"
    properties:
      security.protocol: SSL
      ssl.keystore.location: "{{schema_registry_keystore_path}}"
      ssl.keystore.password: "{{schema_registry_keystore_storepass}}"
      ssl.key.password: "{{schema_registry_keystore_keypass}}"
  truststore:
    enabled: "{{schema_registry_ssl_mutual_auth_enabled|bool or mds_ssl_enabled|bool}}"
    properties:
      ssl.truststore.location: "{{schema_registry_truststore_path}}"
      ssl.truststore.password: "{{schema_registry_truststore_storepass}}"
  mtls:
    enabled: "{{ schema_registry_ssl_mutual_auth_enabled }}"
    properties:
      ssl.client.auth: true
  kafka_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[schema_registry_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'kafkastore.', schema_registry_truststore_path, schema_registry_truststore_storepass, schema_registry_keystore_path, schema_registry_keystore_storepass, schema_registry_keystore_keypass,
                            false, sasl_plain_users.schema_registry.principal, sasl_plain_users.schema_registry.password, sasl_scram_users.schema_registry.principal, sasl_scram_users.schema_registry.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, schema_registry_kerberos_keytab_path|default('sr.keytab')|basename, schema_registry_kerberos_principal|default('kafka'),
                            schema_registry_ldap_user, schema_registry_ldap_password, mds_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      kafkastore.connection.url: "{% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper_final_properties.clientPort}}{% endfor %}"
      schema.registry.resource.extension.class: io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension
      confluent.schema.registry.authorizer.class: io.confluent.kafka.schemaregistry.security.authorizer.rbac.RbacAuthorizer
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      confluent.schema.registry.auth.mechanism: JETTY_AUTH
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      authentication.roles: "**"
      confluent.metadata.bootstrap.server.urls: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ mds_http_protocol }}://{{ host }}:{{mds_port}}{% endfor %}"
      confluent.metadata.http.auth.credentials.provider: BASIC
      confluent.metadata.basic.auth.user.info: "{{ schema_registry_ldap_user | default('MISSING') }}:{{ schema_registry_ldap_password | default('MISSING')}}"

schema_registry_custom_properties: {}

schema_registry_combined_properties: "{{schema_registry_properties | combine_properties}}"

schema_registry_final_properties: "{{ schema_registry_combined_properties | combine(schema_registry_custom_properties) }}"

# Kafka Rest Variables
kafka_rest_user: "{{kafka_rest_default_user}}"
kafka_rest_group: "{{kafka_rest_default_group}}"
kafka_rest_port: 8082
kafka_rest_ssl_enabled: "{{ssl_enabled}}"
kafka_rest_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_rest_http_protocol: "{{ 'https' if kafka_rest_ssl_enabled|bool else 'http' }}"
kafka_rest_truststore_path: "/var/ssl/private/kafka_rest.truststore.jks"
kafka_rest_keystore_path: "/var/ssl/private/kafka_rest.keystore.jks"
kafka_rest_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_rest_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_rest_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_rest_keystore_storepass }}"
kafka_rest_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_rest_cert_path: "/var/ssl/private/kafka_rest.crt"
kafka_rest_key_path: "/var/ssl/private/kafka_rest.key"
kafka_rest_kafka_listener_name: internal
kafka_rest:
  log4j_file: /etc/kafka-rest/kafka-rest_log4j.properties

kafka_rest_jolokia_enabled: "{{jolokia_enabled}}"
kafka_rest_jolokia_port: 7775
kafka_rest_jolokia_ssl_enabled: "{{ kafka_rest_ssl_enabled }}"

kafka_rest_properties:
  defaults:
    enabled: true
    properties:
      producer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      consumer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      listeners: "{{kafka_rest_http_protocol}}://0.0.0.0:{{kafka_rest_port}}"
      host.name: "{{inventory_hostname}}"
      zookeeper.connect: "{% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper_final_properties.clientPort}}{% endfor %}"
      bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}{% endfor %}"
      confluent.monitoring.interceptor.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_rest_kafka_listener_name]['port']}}{% endfor %}"
  id:
    enabled: "{{ inventory_hostname in groups.kafka_rest }}"
    properties:
      # id logic depends on inventory hostname being in kafka_broker host list, defaulting to 0 if non rest proxy host
      id: "{{ groups.kafka_rest.index(inventory_hostname) + 1 if inventory_hostname in groups.kafka_rest else 0 }}"
  ssl:
    enabled: "{{kafka_rest_ssl_enabled}}"
    properties:
      ssl.keystore.location: "{{kafka_rest_keystore_path}}"
      ssl.keystore.password: "{{kafka_rest_keystore_storepass}}"
      ssl.key.password: "{{kafka_rest_keystore_keypass}}"
  truststore:
    enabled: "{{kafka_rest_ssl_mutual_auth_enabled|bool or mds_ssl_enabled|bool}}"
    properties:
      ssl.truststore.location: "{{kafka_rest_truststore_path}}"
      ssl.truststore.password: "{{kafka_rest_truststore_storepass}}"
  mtls:
    enabled: "{{ kafka_rest_ssl_mutual_auth_enabled }}"
    properties:
      ssl.client.auth: true
  kafka_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_rest_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'client.', kafka_rest_truststore_path, kafka_rest_truststore_storepass, kafka_rest_keystore_path, kafka_rest_keystore_storepass, kafka_rest_keystore_keypass,
                            false, sasl_plain_users.kafka_rest.principal, sasl_plain_users.kafka_rest.password, sasl_scram_users.kafka_rest.principal, sasl_scram_users.kafka_rest.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_rest_kerberos_keytab_path|default('rp.keytab')|basename, kafka_rest_kerberos_principal|default('rp'),
                            kafka_rest_ldap_user, kafka_rest_ldap_password, mds_urls) }}"
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      schema.registry.url: "{% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      schema.registry.ssl.truststore.location: "{{kafka_rest_truststore_path}}"
      schema.registry.ssl.truststore.password: "{{kafka_rest_truststore_storepass}}"
      schema.registry.ssl.keystore.location: "{{kafka_rest_keystore_path}}"
      schema.registry.ssl.keystore.password: "{{kafka_rest_keystore_storepass}}"
      schema.registry.ssl.key.password: "{{kafka_rest_keystore_keypass}}"
  monitoring_interceptor:
    # TODO interceptors only if c3 on right?
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_rest_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.monitoring.interceptor.', kafka_rest_truststore_path, kafka_rest_truststore_storepass, kafka_rest_keystore_path, kafka_rest_keystore_storepass, kafka_rest_keystore_keypass,
                            false, sasl_plain_users.kafka_rest.principal, sasl_plain_users.kafka_rest.password, sasl_scram_users.kafka_rest.principal, sasl_scram_users.kafka_rest.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_rest_kerberos_keytab_path|default('rp.keytab')|basename, kafka_rest_kerberos_principal|default('rp'),
                            kafka_rest_ldap_user, kafka_rest_ldap_password, mds_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      kafka.rest.resource.extension.class: io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      client.confluent.metadata.server.urls.max.age.ms: 60000
      confluent.metadata.bootstrap.server.urls: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ host }}:{{mds_port}}{% endfor %}"
      confluent.metadata.server.urls.max.age.ms: 60000
      confluent.metadata.basic.auth.user.info: "{{kafka_rest_ldap_user | default('rest') }}:{{kafka_rest_ldap_password | default('pass')}}"
      confluent.metadata.http.auth.credentials.provider: BASIC

kafka_rest_combined_properties: "{{kafka_rest_properties | combine_properties}}"

kafka_rest_custom_properties: {}

kafka_rest_final_properties: "{{ kafka_rest_combined_properties | combine(kafka_rest_custom_properties) }}"



# Kafka Connect Variables
kafka_connect_user: "{{kafka_connect_default_user}}"
kafka_connect_group: "{{kafka_connect_default_group}}"
kafka_connect_rest_port: 8083
kafka_connect_ssl_enabled: "{{ssl_enabled}}"
kafka_connect_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_connect_http_protocol: "{{ 'https' if kafka_connect_ssl_enabled|bool else 'http' }}"
kafka_connect_truststore_path: "/var/ssl/private/kafka_connect.truststore.jks"
kafka_connect_keystore_path: "/var/ssl/private/kafka_connect.keystore.jks"
kafka_connect_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_connect_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_connect_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_connect_keystore_storepass }}"
kafka_connect_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_connect_cert_path: "/var/ssl/private/kafka_connect.crt"
kafka_connect_key_path: "/var/ssl/private/kafka_connect.key"
kafka_connect_kafka_listener_name: internal
kafka_connect:
  log4j_file: /etc/kafka/connect_distributed_log4j.properties

kafka_connect_jolokia_enabled: "{{jolokia_enabled}}"
kafka_connect_jolokia_port: 7773
kafka_connect_jolokia_ssl_enabled: "{{ kafka_connect_ssl_enabled }}"

kafka_connect_group_id: connect-cluster
kafka_connect_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | length, 3 ] | min }}"

kafka_connect_secret_registry_enabled: "{{rbac_enabled}}"
kafka_connect_secret_registry_key: 39ff95832750c0090d84ddf5344583832efe91ef

kafka_connect_plugins_path:
  - /usr/share/java

kafka_connect_confluent_hub_client:
  file: "http://client.hub.confluent.io/confluent-hub-client-latest.tar.gz"
  is_remote: true
  install_dir: /etc/kafka/confluent-hub
kafka_connect_confluent_hub_plugins: []
kafka_connect_confluent_hub_plugins_dest: /usr/share/java
kafka_connect_plugins: []
kafka_connect_plugins_remote: []
kafka_connect_plugins_dest: /usr/share/java

kafka_connect_properties:
  defaults:
    enabled: true
    properties:
      rest.port: "{{kafka_connect_rest_port}}"
      consumer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      producer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      config.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
      config.storage.topic: "{{kafka_connect_group_id}}-configs"
      group.id: "{{kafka_connect_group_id}}"
      internal.key.converter: org.apache.kafka.connect.json.JsonConverter
      internal.key.converter.schemas.enable: "false"
      internal.value.converter: org.apache.kafka.connect.json.JsonConverter
      internal.value.converter.schemas.enable: "false"
      offset.flush.interval.ms: 10000
      offset.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
      offset.storage.topic: "{{kafka_connect_group_id}}-offsets"
      status.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
      status.storage.topic: "{{kafka_connect_group_id}}-status"
      key.converter: io.confluent.connect.avro.AvroConverter
      value.converter: io.confluent.connect.avro.AvroConverter
      plugin.path: "{{(kafka_connect_plugins_path + [kafka_connect_confluent_hub_plugins_dest, kafka_connect_plugins_dest]) | unique | join(',')}}"
      connector.client.config.override.policy: All
      listeners: "{{kafka_connect_http_protocol}}://0.0.0.0:{{kafka_connect_rest_port}}"
      rest.advertised.listener: "{{kafka_connect_http_protocol}}"
      rest.advertised.host.name: "{{inventory_hostname}}"
      rest.advertised.port: "{{kafka_connect_rest_port}}"
      bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}"
      producer.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}"
      consumer.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}"
      producer.confluent.monitoring.interceptor.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}"
      consumer.confluent.monitoring.interceptor.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}"
  ssl:
    enabled: "{{kafka_connect_ssl_enabled}}"
    properties:
      listeners.connect.ssl.keystore.location: "{{kafka_connect_keystore_path}}"
      listeners.connect.ssl.keystore.password: "{{kafka_connect_keystore_storepass}}"
      listeners.connect.ssl.key.password: "{{kafka_connect_keystore_keypass}}"
  mtls:
    enabled: "{{ kafka_connect_ssl_mutual_auth_enabled }}"
    properties:
      listeners.connect.ssl.client.auth: "true"
      listeners.connect.ssl.truststore.location: "{{kafka_connect_truststore_path}}"
      listeners.connect.ssl.truststore.password: "{{kafka_connect_truststore_storepass}}"
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      value.converter.schema.registry.url: "{% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}"
      key.converter.schema.registry.url: "{% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      value.converter.schema.registry.ssl.truststore.location: "{{kafka_broker_truststore_path}}"
      value.converter.schema.registry.ssl.truststore.password: "{{kafka_broker_truststore_storepass}}"
      value.converter.schema.registry.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      value.converter.schema.registry.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
      value.converter.schema.registry.ssl.key.password: "{{kafka_broker_keystore_keypass}}"
      key.converter.schema.registry.ssl.truststore.location: "{{kafka_broker_truststore_path}}"
      key.converter.schema.registry.ssl.truststore.password: "{{kafka_broker_truststore_storepass}}"
      key.converter.schema.registry.ssl.keystore.location: "{{kafka_broker_keystore_path}}"
      key.converter.schema.registry.ssl.keystore.password: "{{kafka_broker_keystore_storepass}}"
      key.converter.schema.registry.ssl.key.password: "{{kafka_broker_keystore_keypass}}"
  kafka_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            '', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_connect_kerberos_keytab_path|default('connect.keytab')|basename, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_urls) }}"
  producer:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'producer.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            true, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_connect_kerberos_keytab_path|default('connect.keytab')|basename, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_urls) }}"
  consumer:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'consumer.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            true, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_connect_kerberos_keytab_path|default('connect.keytab')|basename, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_urls) }}"
  producer_monitoring_interceptor:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'producer.confluent.monitoring.interceptor.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_connect_kerberos_keytab_path|default('connect.keytab')|basename, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_urls) }}"
  consumer_monitoring_interceptor:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'consumer.confluent.monitoring.interceptor.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_connect_kerberos_keytab_path|default('connect.keytab')|basename, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      rest.extension.classes: "io.confluent.connect.security.ConnectSecurityExtension{% if kafka_connect_secret_registry_enabled|bool %},io.confluent.connect.secretregistry.ConnectSecretRegistryExtension{% endif %}"
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.bootstrap.server.urls: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ host }}:{{mds_port}}{% endfor %}"
      confluent.metadata.basic.auth.user.info: "{{kafka_connect_ldap_user| default('MISSING')}}:{{kafka_connect_ldap_password| default('MISSING')}}"
      confluent.metadata.http.auth.credentials.provider: BASIC
  secret_registry:
    enabled: "{{kafka_connect_secret_registry_enabled}}"
    properties:
      config.providers: secret
      config.providers.secret.class: io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider
      config.providers.secret.param.master.encryption.key: "{{kafka_connect_secret_registry_key}}"
      config.providers.secret.param.kafkastore.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}"
  secret_registry_client:
    enabled: true
    properties: "{{ kafka_broker_listeners[kafka_connect_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'config.providers.secret.param.kafkastore.', kafka_connect_truststore_path, kafka_connect_truststore_storepass, kafka_connect_keystore_path, kafka_connect_keystore_storepass, kafka_connect_keystore_keypass,
                            false, sasl_plain_users.kafka_connect.principal, sasl_plain_users.kafka_connect.password, sasl_scram_users.kafka_connect.principal, sasl_scram_users.kafka_connect.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, kafka_connect_kerberos_keytab_path|default('connect.keytab')|basename, kafka_connect_kerberos_principal|default('kafka'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_urls) }}"

kafka_connect_custom_properties: {}

kafka_connect_combined_properties: "{{kafka_connect_properties | combine_properties}}"

kafka_connect_final_properties: "{{ kafka_connect_combined_properties | combine(kafka_connect_custom_properties) }}"


# KSQL Variables
ksql_user: "{{ksql_default_user}}"
ksql_group: "{{ksql_default_group}}"
ksql_listener_port: 8088
ksql_ssl_enabled: "{{ssl_enabled}}"
ksql_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
ksql_http_protocol: "{{ 'https' if ksql_ssl_enabled|bool else 'http' }}"
ksql_truststore_path: "/var/ssl/private/ksql.truststore.jks"
ksql_keystore_path: "/var/ssl/private/ksql.keystore.jks"
ksql_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
ksql_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
ksql_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else ksql_keystore_storepass }}"
ksql_ca_cert_path: "/var/ssl/private/ca.crt"
ksql_cert_path: "/var/ssl/private/ksql.crt"
ksql_key_path: "/var/ssl/private/ksql.key"
ksql_kafka_listener_name: internal
ksql:
  log4j_file: "/etc/ksqldb/ksql-server_log4j.properties"
  jaas_file: "/etc/ksqldb/ksql-server_jaas.conf"

ksql_jolokia_enabled: "{{jolokia_enabled}}"
ksql_jolokia_port: 7774
ksql_jolokia_ssl_enabled: "{{ ksql_ssl_enabled }}"

ksql_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | length, 3 ] | min }}"

ksql_service_id: default_

ksql_properties:
  defaults:
    enabled: true
    properties:
      application.id: ksql-server
      ksql.service.id: "{{ ksql_service_id }}"
      ksql.internal.topic.replicas: "{{ ksql_default_internal_replication_factor }}"
      ksql.streams.replication.factor: "{{ ksql_default_internal_replication_factor }}"
      ksql.streams.state.dir: "{{ksql_streams_state_dir}}"
      ksql.streams.num.standby.replicas: 1
      ksql.streams.producer.delivery.timeout.ms: 2147483647
      ksql.streams.producer.max.block.ms: 9223372036854775807
      producer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      consumer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      listeners: "{{ksql_http_protocol}}://0.0.0.0:{{ksql_listener_port}}"
      bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}{% endfor %}"
      security.protocol: "{{kafka_broker_listeners[ksql_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}"
      confluent.monitoring.interceptor.bootstrap.servers: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}{% endfor %}"
  ssl:
    # KSQL SSL properties shared with Kafka Broker
    # TODO look into this logic
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['ssl_enabled']|default(ssl_enabled)|bool or ksql_ssl_enabled|bool }}"
    properties:
      ssl.truststore.location: "{{ksql_truststore_path}}"
      ssl.truststore.password: "{{ksql_truststore_storepass}}"
      ssl.keystore.location=: "{{ksql_keystore_path}}"
      ssl.keystore.password: "{{ksql_keystore_storepass}}"
      ssl.key.password: "{{ksql_keystore_keypass}}"
  mtls:
    enabled: "{{ ksql_ssl_mutual_auth_enabled }}"
    properties:
      ssl.client.auth: true
  kafka_sasl_plain:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' }}"
    properties:
      sasl.mechanism: PLAIN
      sasl.jaas.config: |-
        org.apache.kafka.common.security.plain.PlainLoginModule required username="{{sasl_plain_users.ksql.principal}}" password="{{sasl_plain_users.ksql.password}}";
  kafka_sasl_scram:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' }}"
    properties:
      sasl.mechanism: SCRAM-SHA-256
      sasl.jaas.config: |-
        org.apache.kafka.common.security.scram.ScramLoginModule required username="{{sasl_scram_users.ksql.principal}}" password="{{sasl_scram_users.ksql.password}}";
  kafka_sasl_gssapi:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' }}"
    properties:
      sasl.mechanism: GSSAPI
      sasl.kerberos.service.name: "{{kerberos_kafka_broker_primary | default('kafka')}}"
      sasl.jaas.config: |-
        com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab="{{kerberos.keytab_dir}}/{{ksql_kerberos_keytab_path | default('ksql.keytab') | basename}}" principal="{{ksql_kerberos_principal | default('ksql')}}";
  kafka_sasl_oauth:
    enabled: "{{ kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'OAUTHBEARER' }}"
    properties:
      sasl.mechanism: OAUTHBEARER
      sasl.login.callback.handler.class: io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
      sasl.jaas.config: |-
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required username="{{ksql_ldap_user | default('ksql')}}" password="{{ksql_ldap_password | default('pass')}}" metadataServerUrls="{{mds_urls}}";
  sr:
    enabled: "{{ 'schema_registry' in groups }}"
    properties:
      ksql.schema.registry.url: "{% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}"
  sr_ssl:
    enabled: "{{ 'schema_registry' in groups and schema_registry_ssl_enabled|bool }}"
    properties:
      ksql.schema.registry.ssl.truststore.location: "{{ksql_truststore_path}}"
      ksql.schema.registry.ssl.truststore.password: "{{ksql_truststore_storepass}}"
      ksql.schema.registry.ssl.keystore.location: "{{ksql_keystore_path}}"
      ksql.schema.registry.ssl.keystore.password: "{{ksql_keystore_storepass}}"
      ksql.schema.registry.ssl.key.password: "{{ksql_keystore_keypass}}"
  sr_rbac:
    enabled: "{{ 'schema_registry' in groups and rbac_enabled|bool }}"
    properties:
      ksql.schema.registry.basic.auth.credentials.source: USER_INFO
      ksql.schema.registry.basic.auth.user.info: "{{ ksql_ldap_user | default('ksql') }}:{{ ksql_ldap_password | default('pass') }}"
  monitoring_interceptor:
    # TODO only want this if c3 installed i think
    enabled: true
    properties: "{{ kafka_broker_listeners[ksql_kafka_listener_name] | client_properties(ssl_enabled, pkcs12_enabled, ssl_mutual_auth_enabled, sasl_protocol,
                            'confluent.monitoring.interceptor.', ksql_truststore_path, ksql_truststore_storepass, ksql_keystore_path, ksql_keystore_storepass, ksql_keystore_keypass,
                            false, sasl_plain_users.ksql.principal, sasl_plain_users.ksql.password, sasl_scram_users.ksql.principal, sasl_scram_users.ksql.password,
                            kerberos_kafka_broker_primary|default('kafka'), kerberos.keytab_dir, ksql_kerberos_keytab_path|default('ksql.keytab')|basename, ksql_kerberos_principal|default('ksql'),
                            kafka_connect_ldap_user, kafka_connect_ldap_password, mds_urls) }}"
  rbac:
    enabled: "{{rbac_enabled}}"
    properties:
      ksql.security.extension.class: io.confluent.ksql.security.KsqlConfluentSecurityExtension
      rest.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      websocket.servlet.initializor.classes: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
      oauth.jwt.public.key.path: "{{rbac_enabled_public_pem_path}}"
      public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.bootstrap.server.urls: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ host }}:{{mds_port}}{% endfor %}"
      confluent.metadata.public.key.path: "{{rbac_enabled_public_pem_path}}"
      confluent.metadata.basic.auth.user.info: "{{ ksql_ldap_user | default('ksql') }}:{{ ksql_ldap_password | default('pass') }}"
      confluent.metadata.http.auth.credentials.provider: BASIC

ksql_combined_properties: "{{ksql_properties | combine_properties}}"

ksql_custom_properties: {}

ksql_final_properties: "{{ ksql_combined_properties | combine(ksql_custom_properties) }}"




# Control Center Variables
control_center_user: "{{control_center_default_user}}"
control_center_group: "{{control_center_default_group}}"
control_center_port: 9021
control_center_listener_hostname: "0.0.0.0"
control_center_ssl_enabled: "{{ssl_enabled}}"
control_center_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
control_center_http_protocol: "{{ 'https' if control_center_ssl_enabled|bool else 'http' }}"
control_center_truststore_path: "/var/ssl/private/control_center.truststore.jks"
control_center_keystore_path: "/var/ssl/private/control_center.keystore.jks"
control_center_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
control_center_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
control_center_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else control_center_keystore_storepass }}"
control_center_ca_cert_path: "/var/ssl/private/ca.crt"
control_center_cert_path: "/var/ssl/private/control_center.crt"
control_center_key_path: "/var/ssl/private/control_center.key"
control_center_kafka_listener_name: internal
control_center:
  log4j_file: /etc/confluent-control-center/control-center_log4j.properties

sasl_scram_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

sasl_plain_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

zookeeper_digest_users:
  admin:
    principal: admin
    password: admin-secret
  kafka_broker:
    principal: kafka_broker
    password: kafka_broker-secret

rbac_enabled: false
mds_acls_enabled: "{{rbac_enabled}}"
rbac_enabled_public_pem_path: /var/ssl/private/public.pem
rbac_enabled_private_pem_path: /var/ssl/private/tokenKeypair.pem

mds_ssl_enabled: "{{ssl_enabled}}"
mds_ssl_mutual_auth_enabled: "{{ssl_mutual_auth_enabled}}"
mds_http_protocol: "{{ 'https' if mds_ssl_enabled|bool else 'http' }}"
mds_port: 8090
mds_urls: "{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ mds_http_protocol }}://{{ host }}:{{ mds_port }}{% endfor %}"

create_mds_certs: "{{ rbac_enabled }}"
token_services_public_pem_file: generated_ssl_files/public.pem
token_services_private_pem_file: generated_ssl_files/tokenKeypair.pem

rbac_component_additional_system_admins: []
schema_registry_additional_system_admins: "{{rbac_component_additional_system_admins}}"
ksql_additional_system_admins: "{{rbac_component_additional_system_admins}}"
kafka_connect_additional_system_admins: "{{rbac_component_additional_system_admins}}"
control_center_additional_system_admins: "{{rbac_component_additional_system_admins}}"
