# Maintained by Ansible

# KSQL Configuration
listeners={{ksql_http_protocol}}://0.0.0.0:{{ksql_listener_port}}


# Kafka Broker Configuration
bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = '' %}
{% set listener = kafka_broker_listeners[ksql_kafka_listener_name] %}
{% set truststore_path = ksql_truststore_path %}
{% set truststore_storepass = ksql_truststore_storepass %}
{% set keystore_path = ksql_keystore_path %}
{% set keystore_storepass = ksql_keystore_storepass %}
{% set keystore_keypass = ksql_keystore_keypass %}
{% set sasl_plain_username = sasl_plain_users.ksql.principal %}
{% set sasl_plain_password = sasl_plain_users.ksql.password %}
{% set sasl_scram_username = sasl_scram_users.ksql.principal %}
{% set sasl_scram_password = sasl_scram_users.ksql.password %}
{% set kerberos_keytab_path = ksql_kerberos_keytab_path %}
{% set kerberos_principal = ksql_kerberos_principal %}
{% set oauth_username = ksql_ldap_user %}
{% set oauth_password = ksql_ldap_password %}
{% include 'kafka_client.j2' %}


{% for key, value in ksql.properties.items() %}
{{key}}={{value}}
{% endfor %}

{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
# Schema Registry Configuration
ksql.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
ksql.schema.registry.ssl.truststore.location={{ksql_truststore_path}}
ksql.schema.registry.ssl.truststore.password={{ksql_truststore_storepass}}
ksql.schema.registry.ssl.keystore.location={{ksql_keystore_path}}
ksql.schema.registry.ssl.keystore.password={{ksql_keystore_storepass}}
ksql.schema.registry.ssl.key.password={{ksql_keystore_keypass}}
{% endif %}
{% endif %}




# Monitoring Configuration
confluent.monitoring.interceptor.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'confluent.monitoring.interceptor.' %}
{% include 'kafka_client.j2' %}



{% if rbac_enabled|bool %}
###################### Set KSQL RBAC settings ######################
# Enable Confluent KSQL security plugin
ksql.security.extension.class=io.confluent.ksql.security.KsqlConfluentSecurityExtension

# Enable KSQL OAuth authentication
rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
websocket.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
oauth.jwt.public.key.path={{rbac_enabled_public_pem_path}}
confluent.metadata.public.key.path={{rbac_enabled_public_pem_path}}
public.key.path={{rbac_enabled_public_pem_path}}

# location of metadata service
confluent.metadata.bootstrap.server.urls={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ host }}:8090{% endfor %}

# Credentials to access the Metadata service
confluent.metadata.basic.auth.user.info={{ ksql_ldap_user }}:{{ ksql_ldap_password }}
confluent.metadata.http.auth.credentials.provider=BASIC

{% if mds_ssl_enabled|bool %}
############################ MDS TLS Settings #####################################
confluent.metadata.server.ssl.truststore.location={{ksql_truststore_path}}
confluent.metadata.server.ssl.truststore.password={{ksql_truststore_storepass}}
{% if mds_ssl_mutual_auth_enabled|bool %}
confluent.metadata.server.ssl.keystore.location={{ksql_keystore_path}}
confluent.metadata.server.ssl.keystore.password={{ksql_keystore_keypass}}
confluent.metadata.server.ssl.key.password={{ksql_keystore_keypass}}
{% endif %}
{% endif %}


{% endif %}
