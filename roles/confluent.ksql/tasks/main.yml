# Install Packages
- name: Install the KSQL Packages
  yum:
    name: "{{item}}-{{confluent.package_version}}"
    state: latest
  loop: "{{ksql.packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the KSQL Packages
  apt:
    name: "{{item}}={{confluent.package_version}}"
    update_cache: yes
  loop: "{{ksql.packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: ksql create group
  group:
    name: "{{ksql.group}}"
- name: ksql create user
  user:
    name: "{{ksql.user}}"
    comment: "Connect Distributed User"
    system: yes
    group: "{{ksql.group}}"
- name: Change keytabs ownership
  file:
    path: "{{kerberos.keytab_dir}}"
    group: "{{ksql.group}}"
    mode: '650'
    recurse: yes
- name: change streams directory ownership
  file:
    path: "{{ksql.streamsDataDir}}"
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
    state: directory
    mode: 0750
- name: ksql create config
  template:
    src: ksql.properties.j2
    dest: "{{ksql.config_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "plaintext"
  notify:
    - restart ksql
- name: ksql create config
  template:
    src: ksql_ssl.properties.j2
    dest: "{{ksql.config_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "ssl"
  notify:
    - restart ksql
- name: ksql create config
  template:
    src: ksql_sasl_ssl.properties.j2
    dest: "{{ksql.config_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "sasl_ssl"
  notify:
    - restart ksql
- name: ksql create config
  template:
    src: ksql_ssl_customcerts.properties.j2
    dest: "{{ksql.config_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "ssl_customcerts"
  notify:
    - restart ksql
- name: ksql ssl kerberos config
  template:
    src: ksql_kerberos.properties.j2
    dest: "{{ksql.config_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "kerberos"
  notify:
    - restart ksql
- name: ksql ssl kerberos config
  template:
    src: ksql_kerberos_ssl.properties.j2
    dest: "{{ksql.config_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "kerberos_ssl"
  notify:
    - restart ksql
- name: ksql ssl kerberos config
  template:
    src: ksql_kerberos_ssl_customcerts.properties.j2
    dest: "{{ksql.config_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "kerberos_ssl_customcerts"
  notify:
    - restart ksql
- name: ksql Jaas config
  template:
    src: ksql-server_jaas.conf.j2
    dest: "{{ksql_jaas_file}}"
    mode: 0640
    owner: "{{ksql.user}}"
    group: "{{ksql.group}}"
  when: security_mode == "kerberos" or security_mode == "kerberos_ssl" or security_mode == "kerberos_ssl_customcerts"
  notify:
    - restart ksql



# - name: create systemd override file
#   file:
#     path: "{{ksql.systemd_override}}"
#     owner: "{{ksql.user}}"
#     group: "{{ksql.group}}"
#     state: directory
#     mode: 0640
# - name: write environment variables
#   template:
#     src: environment.j2
#     dest: "{{ksql.systemd_override}}/override.conf"
#     mode: 0640
#     owner: "{{ksql.user}}"
#     group: "{{ksql.group}}"
#   notify:
#     - reload systemd
#     - restart ksql

- name: Update Service File with Environment Variables
  lineinfile:
    path: "{{ksql.systemd_file}}"
    regexp: ".*{{item.key}}.*"
    line: "Environment='{{item.key}}={{item.value}}'"
    insertafter: "ExecStart=.*"
  with_dict: "{{ ksql_service_environment_overrides }}"
  notify:
    - reload systemd
    - restart ksql

- name: Update Service File with Service Overrides
  lineinfile:
    path: "{{ksql.systemd_file}}"
    regexp: "{{item.key}}.*"
    line: "{{item.key}}={{item.value}}"
    insertafter: "ExecStart=.*"
  with_dict: "{{ ksql_service_overrides }}"
  notify:
    - reload systemd
    - restart ksql

- meta: flush_handlers

- name: Start Ksql Service
  systemd:
    name: "{{ksql.service_name}}"
    enabled: "{{ksql.systemd.enabled}}"
    state: "{{ksql.systemd.state}}"
