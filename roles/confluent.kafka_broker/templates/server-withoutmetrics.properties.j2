# Maintained by Ansible
zookeeper.connect={% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper.properties.clientPort}}{% endfor %}

log.dirs={% for logdir in kafka_broker.datadir %}{% if loop.index > 1%},{% endif %}{{ logdir }}{% endfor %}

broker.id={{ broker_id | default(groups.kafka_broker.index(inventory_hostname) + 1)}}

{% for key, value in kafka_broker.properties.items() %}
{{key}}={{value}}
{% endfor %}

listeners={{kafka_broker_security_protocol}}://:{{kafka_port}}

security.inter.broker.protocol={{kafka_broker_security_protocol}}
{% if kafka_broker_ssl_enabled|bool %}
ssl.truststore.location={{kafka_broker_truststore_path}}
ssl.truststore.password={{kafka_broker_truststore_storepass}}
ssl.keystore.location={{kafka_broker_keystore_path}}
ssl.keystore.password={{kafka_broker_keystore_storepass}}
ssl.key.password={{kafka_broker_keystore_keypass}}
{% endif %}
{% if kafka_broker_ssl_mutual_auth_enabled|bool %}
ssl.client.auth=required
{% endif %}
{% if sasl_protocol == 'plain' %}
sasl.enabled.mechanisms=PLAIN
sasl.mechanism.inter.broker.protocol=PLAIN
listener.name.sasl_ssl.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="broker" password="broker-secret" user_broker="broker-secret" user_client="client-secret";
{% endif %}
{% if sasl_protocol == 'kerberos' %}
sasl.enabled.mechanisms=GSSAPI
sasl.mechanism.inter.broker.protocol=GSSAPI
sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
{% endif %}


{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
# Schema Registry Configuration
confluent.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
confluent.schema.registry.ssl.truststore.location={{kafka_broker_truststore_path}}
confluent.schema.registry.ssl.truststore.password={{kafka_broker_truststore_storepass}}
confluent.schema.registry.ssl.keystore.location={{kafka_broker_keystore_path}}
confluent.schema.registry.ssl.keystore.password={{kafka_broker_keystore_storepass}}
confluent.schema.registry.ssl.key.password={{kafka_broker_keystore_keypass}}
{% endif %}
{% endif %}
