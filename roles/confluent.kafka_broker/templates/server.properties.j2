# Maintained by Ansible
zookeeper.connect={% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper.properties.clientPort}}{% endfor %}

log.dirs={% for logdir in kafka_broker.datadir %}{% if loop.index > 1%},{% endif %}{{ logdir }}{% endfor %}

broker.id={{ broker_id | default(groups.kafka_broker.index(inventory_hostname) + 1)}}

{% for key, value in kafka_broker.properties.items() %}
{{key}}={{value}}
{% endfor %}

{% if fips_enabled|bool %}
enable.fips=true
security.providers=io.confluent.kafka.security.fips.provider.BcFipsProviderCreator,io.confluent.kafka.security.fips.provider.BcFipsJsseProviderCreator
{% endif %}



listeners={% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://{{ listener['value']['hostname'] | default('') }}:{{ listener['value']['port'] }}{% endfor %}

listener.security.protocol.map={% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}:{{ listener['value'] | kafka_protocol_defaults(sasl_protocol, ssl_enabled)}}{% endfor %}


## Inter Broker Listener Configuration
inter.broker.listener.name={{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['name']}}
{% if kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol != 'none' %}
sasl.mechanism.inter.broker.protocol={{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol}}
{% endif %}
{% if kafka_broker_sasl_enabled_mechanisms|length > 0 %}
sasl.enabled.mechanisms={% for mechanism in kafka_broker_sasl_enabled_mechanisms %}{% if loop.index > 1%},{% endif %}{{ mechanism|upper }}{% endfor %}

{% endif %}
{% if 'GSSAPI' in kafka_broker_sasl_enabled_mechanisms %}
sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
{% endif %}

{% for listener in kafka_broker_listeners|dict2items %}
{% include 'listener.j2' %}

{% endfor %}

{% if kafka_broker_schema_validation_enabled|bool %}
{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
# Schema Registry Configuration
confluent.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
confluent.schema.registry.ssl.truststore.location={{kafka_broker_truststore_path}}
confluent.schema.registry.ssl.truststore.password={{kafka_broker_truststore_storepass}}
confluent.schema.registry.ssl.keystore.location={{kafka_broker_keystore_path}}
confluent.schema.registry.ssl.keystore.password={{kafka_broker_keystore_storepass}}
confluent.schema.registry.ssl.key.password={{kafka_broker_keystore_keypass}}
{% endif %}
{% endif %}
{% endif %}

## Metrics Reporter Configuration
confluent.metrics.reporter.security.protocol={{kafka_broker_listeners.external | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners.external.ssl_enabled|bool %}
confluent.metrics.reporter.ssl.truststore.location={{kafka_broker_truststore_path}}
confluent.metrics.reporter.ssl.truststore.password={{kafka_broker_truststore_storepass}}
{% if kafka_broker_listeners.external.ssl_mutual_auth_enabled|bool %}
confluent.metrics.reporter.ssl.keystore.location={{kafka_broker_keystore_path}}
confluent.metrics.reporter.ssl.keystore.password={{kafka_broker_keystore_storepass}}
confluent.metrics.reporter.ssl.key.password={{kafka_broker_keystore_keypass}}
{% if pkcs12_enabled|bool %}
confluent.metrics.reporter.ssl.keymanager.algorithm=PKIX
confluent.metrics.reporter.ssl.trustmanager.algorithm=PKIX
confluent.metrics.reporter.ssl.keystore.type=pkcs12
confluent.metrics.reporter.ssl.truststore.type=pkcs12
{% endif %}
{% endif %}
{% endif %}

{% if kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol == 'PLAIN' %}
confluent.metrics.reporter.sasl.mechanism=PLAIN
confluent.metrics.reporter.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
   username="{{sasl_plain_users.admin.principal}}" password="{{sasl_plain_users.admin.password}}";
{% endif %}
{% if kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol == 'GSSAPI' %}
confluent.metrics.reporter.sasl.mechanism=GSSAPI
confluent.metrics.reporter.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
confluent.metrics.reporter.sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required \
   useKeyTab=true \
   storeKey=true \
   keyTab="{{kerberos.keytab_dir}}/{{kafka_broker_kerberos_keytab_path | basename}}" \
   principal="{{kafka_broker_kerberos_principal}}";
{% endif %}
{% if kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
confluent.metrics.reporter.sasl.mechanism=SCRAM-SHA-256
confluent.metrics.reporter.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
   username="{{sasl_scram_users.admin.principal}}" password="{{sasl_scram_users.admin.password}}";
{% endif %}

{% if rbac_mtls_3_port|bool %}
############################# TLS Listener Mapping Rules #############################
listener.name.internal.ssl.principal.mapping.rules= {{ rbac_mtls_internal_map_rule }}
listener.name.external.ssl.principal.mapping.rules= {{ rbac_mtls_external_map_rule }}

############################# Token Listener #############################
listener.name.token.sasl.enabled.mechanisms=OAUTHBEARER
listener.name.token.oauthbearer.sasl.jaas.config= \
    org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        publicKeyPath="{{rbac_mtls_3_port_public_pem_path}}{{rbac_mtls_public_pem_name}}";
listener.name.token.oauthbearer.sasl.server.callback.handler.class=io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
listener.name.token.oauthbearer.sasl.login.callback.handler.class=io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler

############################ MDS TLS Settings #####################################
confluent.metadata.server.ssl.keystore.location={{kafka_broker_truststore_path}}
confluent.metadata.server.ssl.keystore.password={{kafka_broker_keystore_storepass}}
confluent.metadata.server.ssl.key.password={{kafka_broker_keystore_keypass}}
confluent.metadata.server.ssl.truststore.location={{kafka_broker_keystore_path}}
confluent.metadata.server.ssl.truststore.password={{kafka_broker_truststore_storepass}}

############################# Authorization Settings #############################
authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
confluent.authorizer.access.rule.providers=ZK_ACL,CONFLUENT
confluent.authorizer.group.provider=CONFLUENT
{% if ssl_enabled|bool and ssl_custom_certs|bool and rbac_mtls_3_port|bool %}super.users=User:{{ rbac_mtls_broker_admin }}{{';'}}{% for host in groups['kafka_broker'] %}User:{{ rbac_mtls_principal_name }}{% if (loop.index > 0) and (loop.index < groups['kafka_broker'] | length){{';'}}{% endif %}{% endfor %}
{% elif ssl_enabled|bool and ssl_provided_keystore_and_truststore|bool and rbac_mtls_3_port|bool %}super.users=User:{{ rbac_mtls_broker_admin }}{{';'}}{% for host in groups['kafka_broker'] %}User:{{ rbac_mtls_principal_name }}{% if (loop.index > 0) and (loop.index < groups['kafka_broker'] | length){{';'}}{% endif %}{% endfor %}
{% elif ssl_enabled|bool and rbac_mtls_3_port|bool %}super.users=User:{{ rbac_mtls_broker_admin }}{{';'}}{% for host in groups['kafka_broker'] %}User:{{ host }}{% if (loop.index > 0) and (loop.index < groups['kafka_broker'] | length) %}{{';'}}{% endif %}{% endfor %}
{% endif %}

confluent.metadata.server.listeners=https://0.0.0.0:8090

############################# MDS Token Service Settings - enable token generation #############################
confluent.metadata.server.token.auth.enable=true
confluent.metadata.server.token.max.lifetime.ms=3600000
confluent.metadata.server.token.key.path={{rbac_mtls_3_port_private_pem_path}}{{rbac_mtls_private_pem_name}}
confluent.metadata.server.public.key.path={{rbac_mtls_3_port_public_pem_path}}{{rbac_mtls_public_pem_name}}
confluent.metadata.server.token.signature.algorithm=RS256
confluent.metadata.server.authentication.method=BEARER

############################# Identity Provider Settings(LDAP - local OpenLDAP) #############################
ldap.java.naming.factory.initial=com.sun.jndi.ldap.LdapCtxFactory
ldap.com.sun.jndi.ldap.read.timeout=3000
ldap.java.naming.provider.url=ldap://{{rbac_mtls_ldap_url}}:{{rbac_mtls_ldap_port}}
# how mds authenticates to ldap server
ldap.java.naming.security.principal=CN={{rbac_mtls_ldap_principal}},{{rbac_mtls_ldap_user_search_base}}
ldap.java.naming.security.credentials={{rbac_mtls_ldap_princiapl_password}}
ldap.java.naming.security.authentication=simple
# ldap search mode (GROUPS is default)
#ldap.search.mode=GROUPS
#ldap.search.mode=USERS
# how to search for users
ldap.user.search.base={{rbac_mtls_ldap_user_search_base}}
# how to search for groups
ldap.group.search.base={{rbact_mtls_ldap_group_search_base}}
# which attribute in ldap record corresponds to user name
ldap.user.name.attribute=sAMAccountName
ldap.user.memberof.attribute.pattern=CN=(.*),{{rbac_mtls_ldap_user_search_base}}
ldap.group.object.class=group
ldap.group.name.attribute=sAMAccountName
ldap.group.member.attribute.pattern=CN=(.*),{{rbac_mtls_ldap_user_search_base}}
confluent.security.event.logger.enabled=false
{% endif %}
