---
# Custom filters used in this file are defined in filter_plugins/filters.py

confluent_repo_version: 5.5
confluent_package_version: 5.5.1
confluent_full_package_version: "{{ confluent_package_version + '-1' }}"
confluent_package_redhat_suffix: "{{ '-' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"
confluent_package_debian_suffix: "{{ '=' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"

### Boolean to enable Jolokia Agent installation and configuration on all components
jolokia_enabled: true

### Full path to download the Jolokia Agent Jar
jolokia_jar_path: /opt/jolokia/jolokia.jar

### Boolean to enable Prometheus Exporter Agent installation and configuration on all components
jmxexporter_enabled: false

### Full path to download the Prometheus Exporter Agent Jar
jmxexporter_jar_path: /opt/prometheus/jmx_prometheus_javaagent.jar

### Boolean to have cp-ansible configure components with FIPS security settings
fips_enabled: false

fips_jar_path: /usr/share/java/kafka/bc-fips-1.0.1.jar
fips_provider_class: org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider
pkcs12_enabled: "{{ true if fips_enabled|bool else false }}"

### Boolean to enable cp-ansible's Custom Log4j Configuration across all components
custom_log4j: true

### Boolean to configure custom repo file on RHEL/Centos hosts, must also set custom_yum_repofile_filepath variable
custom_yum_repofile: false

### Full path on control node to custom yum repo file, must also set custom_yum_repofile to true
custom_yum_repofile_filepath: ""

### Boolean to configure custom apt repo file on Debian hosts, must also set custom_apt_repo_filepath variable
custom_apt_repo: false

### Full path on control node to custom apt repo file, must also set custom_apt_repo to true
custom_apt_repo_filepath: ""

open_file_limit: 500000

### Boolean to install commercially licensed confluent-server instead of community version: confluent-kafka
confluent_server_enabled: true

### Boolean to enable health checks on all components
health_checks_enabled: true

common_role_completed: false

proxy_env: {}

### SASL Mechanism to set on all Kafka Listeners. Configures all components to use that mechanism for authentication. Possible options none, kerberos, plain, scram
sasl_protocol: none

### Boolean to configure components with TLS Encryption. Also manages Java Keystore creation
ssl_enabled: false

### Boolean to enable mTLS Authentication on all Kafka Listeners. Configures all components to use mTLS for authentication.
ssl_mutual_auth_enabled: false

### Boolean to create Keystores with Self Signed Certificates, defaults to true. Alternatively can use ssl_provided_keystore_and_truststore or ssl_custom_certs
self_signed: "{{ false if ssl_provided_keystore_and_truststore|bool or ssl_custom_certs|bool else true }}"

ssl_self_signed_ca_cert_filename: snakeoil-ca-1.crt
ssl_self_signed_ca_key_filename: snakeoil-ca-1.key
ssl_self_signed_ca_password: capassword123

### Boolean to have reruns of all.yml regenerate the certificate authority used for self signed certs
regenerate_ca: true

### Boolean to have reruns of all.yml recreate Keystores
regenerate_keystore_and_truststore: true

certs_updated: false

### Boolean for TLS Encryption option to provide own Host Keystores.
ssl_provided_keystore_and_truststore: false

### Full path to host specific keystore on ansible control node. Used with ssl_provided_keystore_and_truststore: true. May set per host, or use inventory_hostname variable eg "/tmp/certs/{{inventory_hostname}}-keystore.jks"
ssl_keystore_filepath: ""

### Keystore Key Password for host specific keystore. Used with ssl_provided_keystore_and_truststore: true. May set per host if keystores have unique passwords
ssl_keystore_key_password: ""

### Keystore Password for host specific keystore. Used with ssl_provided_keystore_and_truststore: true. May set per host if keystores have unique passwords
ssl_keystore_store_password: ""

### Full path to host specific truststore on ansible control node. Used with ssl_provided_keystore_and_truststore: true. Can share same keystore for all components if it contains all ca certs used to sign host certificates
ssl_truststore_filepath: ""

### Keystore Password for host specific truststore. Used with ssl_provided_keystore_and_truststore: true
ssl_truststore_password: ""

### Keystore alias for ca certificate
ssl_truststore_ca_cert_alias: ""

### Boolean for TLS Encryption option to provide own Host Certificates. Must also set ssl_ca_cert_filepath, ssl_signed_cert_filepath, ssl_key_filepath, ssl_key_password
ssl_custom_certs: false

### Full path to CA Certificate Bundle on ansible control node. Used with ssl_custom_certs: true
ssl_ca_cert_filepath: ""

### Full path to host specific signed cert on ansible control node. Used with ssl_custom_certs: true. May set per host, or use inventory_hostname variable eg "/tmp/certs/{{inventory_hostname}}-signed.crt"
ssl_signed_cert_filepath: ""

### Full path to host specific key on ansible control node. Used with ssl_custom_certs: true. May set per host, or use inventory_hostname variable eg "/tmp/certs/{{inventory_hostname}}-key.pem"
ssl_key_filepath: ""

### Password to host specific key. Do not set if key does not require password. Used with ssl_custom_certs: true.
ssl_key_password: ""

### Boolean stating certs and keys are already on hosts. Used with ssl_custom_certs: true.
ssl_custom_certs_remote_src: false


# Zookeeper Variables
zookeeper_user: "{{zookeeper_default_user}}"
zookeeper_group: "{{zookeeper_default_group}}"
zookeeper_sasl_protocol: "{{sasl_protocol if sasl_protocol == 'kerberos' else 'none'}}"
# Variable only used by Kafka for the time being, health checks/components will use 2181
zookeeper_client_port: "{{'2182' if zookeeper_ssl_enabled|bool else '2181'}}"
zookeeper_ssl_enabled: "{{ssl_enabled}}"
zookeeper_ssl_mutual_auth_enabled: "{{ssl_mutual_auth_enabled}}"
zookeeper_truststore_path: "/var/ssl/private/zookeeper.truststore.jks"
zookeeper_keystore_path: "/var/ssl/private/zookeeper.keystore.jks"
zookeeper_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
zookeeper_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
zookeeper_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}"
zookeeper_ca_cert_path: "/var/ssl/private/ca.crt"
zookeeper_cert_path: "/var/ssl/private/zookeeper.crt"
zookeeper_key_path: "/var/ssl/private/zookeeper.key"
zookeeper_keytab_path: /etc/security/keytabs/zookeeper.keytab
zookeeper:
  log4j_file: /etc/kafka/zookeeper_log4j.properties
  jaas_file: /etc/kafka/zookeeper_jaas.conf
  # Deprecated way of providing custom properties
  properties: {}

zookeeper_jolokia_enabled: "{{jolokia_enabled}}"
zookeeper_jolokia_port: 7770

zookeeper_jmxexporter_enabled: "{{jmxexporter_enabled}}"
zookeeper_jmxexporter_config_path: /opt/prometheus/zookeeper.yml
zookeeper_jmxexporter_port: 8079

zookeeper_health_check_command: "exec 42<>/dev/tcp/127.0.0.1/{{zookeeper_final_properties.clientPort}}; echo -e 'srvr' >&42; cat <&42"

zookeeper_current_node_hostname: "{{ inventory_hostname }}"
zookeeper_peer_port: 2888
zookeeper_leader_port: 3888

# User provided list of files to copy onto host
zookeeper_copy_files: []

# User provided properties, merged into the final properties dictionary with precedence
zookeeper_custom_properties: "{{ zookeeper.properties }}"


#### Kafka Broker Variables ####
kafka_broker_default_listeners:
  internal:
    name: INTERNAL
    port: 9092
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ 'OAUTH' if rbac_enabled|bool else sasl_protocol }}"

kafka_broker_custom_listeners:
  broker:
    name: BROKER
    port: 9091
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"

# Deprecated variable
kafka_broker_configure_additional_brokers: true
kafka_broker_configure_multiple_listeners: "{{kafka_broker_configure_additional_brokers}}"

kafka_broker_listeners: "{{ kafka_broker_default_listeners | combine(kafka_broker_custom_listeners, recursive=True) if kafka_broker_configure_multiple_listeners|bool else  kafka_broker_default_listeners}}"
kafka_broker_inter_broker_listener_name: "{{ 'broker' if kafka_broker_configure_multiple_listeners|bool else 'internal' }}"

# Uses custom filter to create a list of all sasl_protocols, removes ['none'], and reduces to unique items
kafka_broker_sasl_enabled_mechanisms: "{{ kafka_broker_listeners | get_sasl_mechanisms(sasl_protocol) | difference(['none']) | unique }}"

kafka_broker_user: "{{kafka_broker_default_user}}"
kafka_broker_group: "{{kafka_broker_default_group}}"
kafka_broker_truststore_path: "/var/ssl/private/kafka_broker.truststore.jks"
kafka_broker_keystore_path: "/var/ssl/private/kafka_broker.keystore.jks"
kafka_broker_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_broker_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_broker_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_broker_keystore_storepass }}"
kafka_broker_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_broker_cert_path: "/var/ssl/private/kafka_broker.crt"
kafka_broker_key_path: "/var/ssl/private/kafka_broker.key"
kafka_broker_keytab_path: /etc/security/keytabs/kafka_broker.keytab
kafka_broker:
  log4j_file: /etc/kafka/kafka_server_log4j.properties
  jaas_file: /etc/kafka/kafka_server_jaas.conf
  # Deprecated way of providing custom properties
  properties: {}

kafka_broker_schema_validation_enabled: false

kafka_broker_jolokia_enabled: "{{jolokia_enabled}}"
kafka_broker_jolokia_port: 7771
kafka_broker_jolokia_ssl_enabled: "{{ ssl_enabled }}"
kafka_broker_jolokia_java_arg_ssl_addon: ",keystore={{kafka_broker_keystore_path}},keystorePassword={{kafka_broker_keystore_storepass}},protocol=https"
kafka_broker_jolokia_urp_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions"
kafka_broker_jolokia_active_controller_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ActiveControllerCount"

kafka_broker_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_broker_jmxexporter_config_path: /opt/prometheus/kafka.yml
kafka_broker_jmxexporter_port: 8080

# User provided list of files to copy onto host
kafka_broker_copy_files: []

kafka_broker_default_interal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

kafka_broker_metrics_reporter_enabled: true

# Passing old properties dict here for backwards compatibility
kafka_broker_custom_properties: "{{ kafka_broker.properties }}"

#### Schema Registry Variables ####
schema_registry_user: "{{schema_registry_default_user}}"
schema_registry_group: "{{schema_registry_default_group}}"
schema_registry_listener_port: 8081
schema_registry_ssl_enabled: "{{ssl_enabled}}"
schema_registry_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
schema_registry_http_protocol: "{{ 'https' if schema_registry_ssl_enabled|bool else 'http' }}"
schema_registry_truststore_path: "/var/ssl/private/schema_registry.truststore.jks"
schema_registry_keystore_path: "/var/ssl/private/schema_registry.keystore.jks"
schema_registry_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
schema_registry_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
schema_registry_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}"
schema_registry_ca_cert_path: "/var/ssl/private/ca.crt"
schema_registry_cert_path: "/var/ssl/private/schema_registry.crt"
schema_registry_key_path: "/var/ssl/private/schema_registry.key"
schema_registry_keytab_path: /etc/security/keytabs/schema_registry.keytab
schema_registry_kafka_listener_name: internal
schema_registry:
  log4j_file: /etc/schema-registry/schema_registry_log4j.properties
  # Deprecated way of providing custom properties
  properties: {}

schema_registry_jolokia_enabled: "{{jolokia_enabled}}"
schema_registry_jolokia_port: 7772
schema_registry_jolokia_ssl_enabled: "{{ schema_registry_ssl_enabled }}"

schema_registry_jmxexporter_enabled: "{{jmxexporter_enabled}}"
schema_registry_jmxexporter_config_path: /opt/prometheus/schema_registry.yml
schema_registry_jmxexporter_port: 8078

# User provided list of files to copy onto host
schema_registry_copy_files: []

# Passing old properties dict here for backwards compatibility
schema_registry_custom_properties: "{{ schema_registry.properties }}"


#### Kafka Rest Variables ####
kafka_rest_user: "{{kafka_rest_default_user}}"
kafka_rest_group: "{{kafka_rest_default_group}}"
kafka_rest_port: 8082
kafka_rest_ssl_enabled: "{{ssl_enabled}}"
kafka_rest_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_rest_http_protocol: "{{ 'https' if kafka_rest_ssl_enabled|bool else 'http' }}"
kafka_rest_truststore_path: "/var/ssl/private/kafka_rest.truststore.jks"
kafka_rest_keystore_path: "/var/ssl/private/kafka_rest.keystore.jks"
kafka_rest_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_rest_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_rest_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_rest_keystore_storepass }}"
kafka_rest_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_rest_cert_path: "/var/ssl/private/kafka_rest.crt"
kafka_rest_key_path: "/var/ssl/private/kafka_rest.key"
kafka_rest_keytab_path: /etc/security/keytabs/kafka_rest.keytab
kafka_rest_kafka_listener_name: internal
kafka_rest:
  log4j_file: /etc/kafka-rest/kafka-rest_log4j.properties
  # Deprecated way of providing custom properties
  properties: {}

kafka_rest_jolokia_enabled: "{{jolokia_enabled}}"
kafka_rest_jolokia_port: 7775
kafka_rest_jolokia_ssl_enabled: "{{ kafka_rest_ssl_enabled }}"

kafka_rest_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_rest_jmxexporter_config_path: /opt/prometheus/kafka_rest.yml
kafka_rest_jmxexporter_port: 8075

# User provided list of files to copy onto host
kafka_rest_copy_files: []

# Passing old properties dict here for backwards compatibility
kafka_rest_custom_properties: "{{ kafka_rest.properties }}"


# Kafka Connect Variables
kafka_connect_user: "{{kafka_connect_default_user}}"
kafka_connect_group: "{{kafka_connect_default_group}}"
kafka_connect_rest_port: 8083
kafka_connect_ssl_enabled: "{{ssl_enabled}}"
kafka_connect_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_connect_http_protocol: "{{ 'https' if kafka_connect_ssl_enabled|bool else 'http' }}"
kafka_connect_truststore_path: "/var/ssl/private/kafka_connect.truststore.jks"
kafka_connect_keystore_path: "/var/ssl/private/kafka_connect.keystore.jks"
kafka_connect_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_connect_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_connect_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_connect_keystore_storepass }}"
kafka_connect_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_connect_cert_path: "/var/ssl/private/kafka_connect.crt"
kafka_connect_key_path: "/var/ssl/private/kafka_connect.key"
kafka_connect_keytab_path: /etc/security/keytabs/kafka_connect.keytab
kafka_connect_kafka_listener_name: internal
kafka_connect:
  log4j_file: /etc/kafka/connect_distributed_log4j.properties
  # Deprecated way of providing custom properties
  properties: {}

kafka_connect_jolokia_enabled: "{{jolokia_enabled}}"
kafka_connect_jolokia_port: 7773
kafka_connect_jolokia_ssl_enabled: "{{ kafka_connect_ssl_enabled }}"

kafka_connect_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_connect_jmxexporter_config_path: /opt/prometheus/kafka_connect.yml
kafka_connect_jmxexporter_port: 8077

# User provided list of files to copy onto host
kafka_connect_copy_files: []

kafka_connect_group_id: connect-cluster
kafka_connect_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

kafka_connect_secret_registry_enabled: "{{rbac_enabled}}"
kafka_connect_secret_registry_key: 39ff95832750c0090d84ddf5344583832efe91ef

kafka_connect_plugins_path:
  - /usr/share/java

kafka_connect_confluent_hub_client:
  file: "http://client.hub.confluent.io/confluent-hub-client-latest.tar.gz"
  is_remote: true
  install_dir: /etc/kafka/confluent-hub
kafka_connect_confluent_hub_plugins: []
kafka_connect_confluent_hub_plugins_dest: /usr/share/java
kafka_connect_plugins: []
kafka_connect_plugins_remote: []
kafka_connect_plugins_dest: /usr/share/java

# Passing old properties dict here for backwards compatibility
kafka_connect_custom_properties: "{{ kafka_connect.properties }}"

#### KSQLDB Variables ####
ksql_user: "{{ksql_default_user}}"
ksql_group: "{{ksql_default_group}}"
ksql_listener_port: 8088
ksql_ssl_enabled: "{{ssl_enabled}}"
ksql_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
ksql_http_protocol: "{{ 'https' if ksql_ssl_enabled|bool else 'http' }}"
ksql_truststore_path: "/var/ssl/private/ksql.truststore.jks"
ksql_keystore_path: "/var/ssl/private/ksql.keystore.jks"
ksql_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
ksql_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
ksql_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else ksql_keystore_storepass }}"
ksql_ca_cert_path: "/var/ssl/private/ca.crt"
ksql_cert_path: "/var/ssl/private/ksql.crt"
ksql_key_path: "/var/ssl/private/ksql.key"
ksql_keytab_path: /etc/security/keytabs/ksql.keytab
ksql_kafka_listener_name: internal
ksql:
  log4j_file: "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql-server_log4j.properties' , '/etc/ksql/ksql-server_log4j.properties')}}"
  jaas_file: "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql-server_jaas.conf' , '/etc/ksql/ksql-server_jaas.conf')}}"
  properties: {}

ksql_jolokia_enabled: "{{jolokia_enabled}}"
ksql_jolokia_port: 7774
ksql_jolokia_ssl_enabled: "{{ ksql_ssl_enabled }}"

ksql_jmxexporter_enabled: "{{jmxexporter_enabled}}"
ksql_jmxexporter_config_path: /opt/prometheus/ksql.yml
ksql_jmxexporter_port: 8076

# User provided list of files to copy onto host
ksql_copy_files: []

ksql_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

ksql_service_id: default_

# Passing old properties dict here for backwards compatibility
ksql_custom_properties: "{{ ksql.properties }}"

# Control Center Variables
control_center_user: "{{control_center_default_user}}"
control_center_group: "{{control_center_default_group}}"
control_center_port: 9021
control_center_listener_hostname: "0.0.0.0"
control_center_ssl_enabled: "{{ssl_enabled}}"
control_center_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
control_center_http_protocol: "{{ 'https' if control_center_ssl_enabled|bool else 'http' }}"
control_center_truststore_path: "/var/ssl/private/control_center.truststore.jks"
control_center_keystore_path: "/var/ssl/private/control_center.keystore.jks"
control_center_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
control_center_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
control_center_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else control_center_keystore_storepass }}"
control_center_ca_cert_path: "/var/ssl/private/ca.crt"
control_center_cert_path: "/var/ssl/private/control_center.crt"
control_center_key_path: "/var/ssl/private/control_center.key"
control_center_keytab_path: /etc/security/keytabs/control_center.keytab
control_center_kafka_listener_name: internal
control_center:
  log4j_file: /etc/confluent-control-center/control-center_log4j.properties
  # Deprecated way of providing custom properties
  properties: {}

# User provided list of files to copy onto host
control_center_copy_files: []

control_center_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

# Passing old properties dict here for backwards compatibility
control_center_custom_properties: "{{ control_center.properties }}"

sasl_scram_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

sasl_plain_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

zookeeper_digest_users:
  admin:
    principal: admin
    password: admin-secret
  kafka_broker:
    principal: kafka_broker
    password: kafka_broker-secret


mds_broker_listener:
  ssl_enabled: "{{ssl_enabled}}"
  ssl_mutual_auth_enabled: "{{ssl_mutual_auth_enabled}}"
  sasl_protocol: "{{sasl_protocol}}"

rbac_enabled: false
external_mds_enabled: false
mds_acls_enabled: "{{rbac_enabled}}"
rbac_enabled_public_pem_path: /var/ssl/private/public.pem
rbac_enabled_private_pem_path: /var/ssl/private/tokenKeypair.pem

mds_ssl_enabled: "{{ssl_enabled}}"
mds_http_protocol: "{{ 'https' if mds_ssl_enabled|bool else 'http' }}"
mds_port: 8090

mds_bootstrap_server_urls: "{{mds_http_protocol}}://{{ groups['kafka_broker'] | default(['localhost']) | join(':' + mds_port|string + ',' + mds_http_protocol + '://') }}:{{mds_port}}"
# Bootstrap server is a required var for configuring external mds, below is dummy default
mds_broker_bootstrap_servers: localhost:9092


create_mds_certs: "{{ rbac_enabled }}"
token_services_public_pem_file: generated_ssl_files/public.pem
token_services_private_pem_file: generated_ssl_files/tokenKeypair.pem

rbac_component_additional_system_admins: []
schema_registry_additional_system_admins: "{{rbac_component_additional_system_admins}}"
ksql_additional_system_admins: "{{rbac_component_additional_system_admins}}"
kafka_connect_additional_system_admins: "{{rbac_component_additional_system_admins}}"
control_center_additional_system_admins: "{{rbac_component_additional_system_admins}}"
