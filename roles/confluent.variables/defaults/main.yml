zookeeper:
  properties:
    clientPort: 2181
kerberos:
  keytab_dir: /etc/security/keytabs
confluent:
  package_version: 5.3.0-1
  repo_version: 5.3
  support:
    customer_id: anonymous
    metrics_enabled: true

jolokia_jar_path: /opt/jolokia/jolokia.jar
zookeeper_jolokia_port: 7770
kafka_broker_jolokia_port: 7771
schema_registry_jolokia_port: 7772
kafka_connect_jolokia_port: 7773
ksql_jolokia_port: 7774
kafka_rest_jolokia_port: 7775

open_file_limit: 500000

kerberos_configure: true

jolokia_enabled: true

jmxexporter_enabled: false
jmxexporter_install_path: /opt/prometheus/
jmxexporter_jar_path: /opt/prometheus/jmx_prometheus_javaagent.jar
kafka_broker_jmxexporter_port: 8080

rbac_enabled: false
confluent_server_enabled: "{{ true if rbac_enabled|bool else false }}"

## SASL Variables: plain, kerberos, scram supported
sasl_protocol: none

## SSL Variables
ssl_enabled: false
ssl_mutual_auth_enabled: false

ssl_provided_keystore_and_truststore: false
ssl_custom_certs: false
# With self_signed on and ssl_enabled off, self_signed var should not get honored
self_signed: "{{ false if ssl_provided_keystore_and_truststore|bool or ssl_custom_certs|bool else true }}"
ssl_self_signed_ca_cert_filename: snakeoil-ca-1.crt
ssl_self_signed_ca_key_filename: snakeoil-ca-1.key
ssl_self_signed_ca_password: capassword123
regenerate_ca: true

truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
truststore_path: /var/ssl/private/client.truststore.jks
keystore_path: /var/ssl/private/client.keystore.jks
keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else keystore_storepass }}"

certs_updated: false

kafka_broker_listeners:
  internal:
    name: INTERNAL
    port: 9091
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"
  external:
    name: EXTERNAL
    port: 9092
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"

# kafka_broker_internal_listener_name: INTERNAL
# kafka_broker_internal_listener_port: 9091
# kafka_broker_internal_listener_ssl_enabled: "{{ ssl_enabled }}"
# kafka_broker_internal_listener_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
# kafka_broker_internal_listener_sasl_protocol: "{{ sasl_protocol }}"
## TODO these should be in vars dir not defaults, dont want customers tweaking this logic
# kafka_broker_internal_listener_sasl_protocol_normalized: >-
#   {{ 'GSSAPI' if kafka_broker_internal_listener_sasl_protocol|lower == 'kerberos'
#   else 'SCRAM-SHA-256' if kafka_broker_internal_listener_sasl_protocol|upper == 'SCRAM'
#   else 'PLAIN' if kafka_broker_internal_listener_sasl_protocol|upper == 'PLAIN'
#   else 'none' }}
# kafka_broker_internal_listener_security_protocol: >-
#   {{ 'SASL_SSL' if kafka_broker_internal_listener_ssl_enabled|bool and kafka_broker_internal_listener_sasl_protocol | normalize_sasl_protocol in ['GSSAPI', 'PLAIN', 'SCRAM-SHA-256']
#   else 'SASL_PLAINTEXT' if not kafka_broker_internal_listener_ssl_enabled|bool and kafka_broker_internal_listener_sasl_protocol | normalize_sasl_protocol in ['GSSAPI', 'PLAIN', 'SCRAM-SHA-256']
#   else 'SSL' if kafka_broker_internal_listener_ssl_enabled|bool and kafka_broker_internal_listener_sasl_protocol == 'none'
#   else 'PLAINTEXT' }}

# kafka_broker_listeners.external.name: EXTERNAL
# kafka_broker_listeners.external.port: 9092
# kafka_broker_listeners.external.ssl_enabled: "{{ ssl_enabled }}"
# kafka_broker_listeners.external.ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
# kafka_broker_listeners.external.sasl_protocol: "{{ sasl_protocol }}"
# kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol: >-
#   {{ 'GSSAPI' if kafka_broker_listeners.external.sasl_protocol|lower == 'kerberos'
#   else 'SCRAM-SHA-256' if kafka_broker_listeners.external.sasl_protocol|upper == 'SCRAM'
#   else 'PLAIN' if kafka_broker_listeners.external.sasl_protocol|upper == 'PLAIN'
#   else 'none' }}
kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol | kafka_protocol(kafka_broker_listeners.external.ssl_enabled): >-
  {{ 'SASL_SSL' if kafka_broker_listeners.external.ssl_enabled|bool and kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol in ['GSSAPI', 'PLAIN', 'SCRAM-SHA-256']
  else 'SASL_PLAINTEXT' if not kafka_broker_listeners.external.ssl_enabled|bool and kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol in ['GSSAPI', 'PLAIN', 'SCRAM-SHA-256']
  else 'SSL' if kafka_broker_listeners.external.ssl_enabled|bool and kafka_broker_listeners.external.sasl_protocol == 'none'
  else 'PLAINTEXT' }}

# TODO should be a loop
# Creates a list of all listeners' sasl protocols, removes ['none'], and reduces to unique items
kafka_broker_sasl_enabled_mechanisms: "{{ [kafka_broker_listeners.internal.sasl_protocol | normalize_sasl_protocol, kafka_broker_listeners.external.sasl_protocol | normalize_sasl_protocol] | difference(['none']) | unique }}"

schema_registry_ssl_enabled: "{{ssl_enabled}}"
schema_registry_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
schema_registry_http_protocol: "{{ 'https' if schema_registry_ssl_enabled|bool else 'http' }}"
schema_registry_listener_port: 8081

kafka_rest_ssl_enabled: "{{ssl_enabled}}"
kafka_rest_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_rest_http_protocol: "{{ 'https' if kafka_rest_ssl_enabled|bool else 'http' }}"
kafka_rest_port: 8082

kafka_connect_ssl_enabled: "{{ssl_enabled}}"
kafka_connect_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_connect_http_protocol: "{{ 'https' if kafka_connect_ssl_enabled|bool else 'http' }}"
kafka_connect_rest_port: 8083

ksql_ssl_enabled: "{{ssl_enabled}}"
ksql_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
ksql_http_protocol: "{{ 'https' if ksql_ssl_enabled|bool else 'http' }}"
ksql_listener_port: 8088

control_center_ssl_enabled: "{{ssl_enabled}}"
control_center_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
control_center_http_protocol: "{{ 'https' if control_center_ssl_enabled|bool else 'http' }}"
control_center_port: 9021

sasl_scram_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

sasl_plain_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret
