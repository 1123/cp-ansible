# Install Packages
- name: Install the Kafka Connect Packages
  yum:
    name: "{{item}}{{confluent_package_redhat_suffix}}"
    state: latest
  loop: "{{kafka_connect_packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the Kafka Connect Packages
  apt:
    name: "{{item}}{{confluent_package_debian_suffix}}"
  loop: "{{kafka_connect_packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: Create Connect Distributed Group
  group:
    name: "{{kafka_connect.group}}"

- name: Create Connect Distributed User
  user:
    name: "{{kafka_connect.user}}"
    comment: "Connect Distributed User"
    system: yes
    group: "{{kafka_connect.group}}"

- import_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{kafka_connect_truststore_storepass}}"
    truststore_path: "{{kafka_connect_truststore_path}}"
    keystore_path: "{{kafka_connect_keystore_path}}"
    keystore_storepass: "{{kafka_connect_keystore_storepass}}"
    keystore_keypass: "{{kafka_connect_keystore_keypass}}"
  when: kafka_connect_ssl_enabled|bool or kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool

- name: Create Keytabs Directory
  file:
    path: "{{kerberos.keytab_dir}}"
    group: "{{kafka_connect.group}}"
    mode: '650'
    recurse: yes
  when: kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: Copy in Keytab File
  copy:
    src: "{{kafka_connect_kerberos_keytab_path}}"
    dest: "{{kerberos.keytab_dir}}/{{kafka_connect_kerberos_keytab_path | basename}}"
    mode: '600'
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
  when: kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'
  notify:
    - restart connect distributed

- name: Create pem file Directory
  file:
    path: "{{rbac_enabled_public_pem_path}}"
    group: "{{kafka_broker.group}}"
    mode: '650'
    recurse: yes
  when: rbac_enabled|bool 

- name: Copy in public pem files
  copy:
    src: "{{rbac_mtls_public_pem_path}}{{rbac_mtls_public_pem_name}}"
    dest: "{{rbac_enabled_public_pem_path}}"
    mode: '755'
    owner: "{{kafka_broker.user}}"
    group: "{{kafka_broker.group}}"
  when: rbac_enabled|bool

- name: export certificate to pem format for MDS login to create user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
    openssl pkcs12 -in /var/ssl/private/kafka_broker.keystore.jks \
      -out /var/ssl/private/kafka_broker.keystore.pem \
      -passin pass:{{keystore_storepass}} -passout pass:{{keystore_storepass}}
  when: rbac_enabled|bool and ssl_enabled|bool

- name: Get Kafka Cluster ID from Zookeeper
  delegate_to: "{{ groups['zookeeper'][0] }}"
  shell: |
    /bin/zookeeper-shell localhost:2181 get /cluster/id 2> /dev/null | grep version | jq -r .id
  register: cluster_id  
  when: rbac_enabled|bool 

- name: Login to MDS to get Security Token
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -u "{{rbac_mtls_broker_admin}}":"{{rbac_mtls_broker_admin_password}}" -s http://localhost:8090/security/1.0/authenticate 2> /dev/null | grep auth_token | jq -r .auth_token
  register: rbac_token 
  when: rbac_enabled|bool

## Configure users for RBAC with MTLS and self signed certificates

- name: Grant role Security Admin to Connect user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/SecurityAdmin" -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}","connect-cluster":"connect-cluster"}}
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect user ResourceOwner on the group that Connect nodes use to coordinate across the cluster 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings" -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Group","name":"connect-cluster","patternType":"LITERAL"}]}
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect ResourceOwner on the Config topic where Connect configs are stored
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"config.storage.topic","patternType":"LITERAL"}]}"
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect ResourceOwner on the offset storage topic 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST "http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings" -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"offset.storage.topic","patternType":"LITERAL"}]}"
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect ResourceOwner on the offset status topic 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST "http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings" -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"status.storage.topic","patternType":"LITERAL"}]}"
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

## Configure users for RBAC with MTLS and custom certificates

- name: Grant role Security Admin to Connect user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_connect_principal}}/roles/SecurityAdmin" -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"clusters":{"kafka-cluster": "{{cluster_id.stdout}}", "connect-cluster": "connect-cluster"}}'
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect user ResourceOwner on the group that Connect nodes use to coordinate across the cluster 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_connect_principal}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Group","name":"connect-cluster","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect ResourceOwner on the Config topic where Connect configs are stored
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_connect_principal}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"config.storage.topic","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect ResourceOwner on the offset storage topic 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST "http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_connect_principal}}/roles/ResourceOwner/bindings" -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"offset.storage.topic","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect ResourceOwner on the offset status topic 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST "http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_connect_principal}}/roles/ResourceOwner/bindings" -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"status.storage.topic","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Remove exported pem file for MDS login
  file:
     path: /var/ssl/private/kafka_broker_keystore.pem
     state: absent
  when: rbac_enabled|bool and ssl_enabled|bool 

- name: Create Connect Distributed Config
  template:
    src: connect-distributed.properties.j2
    dest: "{{kafka_connect.config_file}}"
    mode: 0640
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
  notify:
    - restart connect distributed

- name: Create Logs Directory
  file:
    path: "{{kafka_connect.appender_log_path}}"
    group: "{{kafka_connect.group}}"
    owner: "{{kafka_connect.user}}"
    mode: '764'
    recurse: yes

- name: Create Connect Distributed log4j Config
  template:
    src: connect_distributed_log4j.properties.j2
    dest: "{{kafka_connect.log4j_file}}"
    mode: 0640
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
  notify:
    - restart connect distributed

- name: Create Service Override Directory
  file:
    path: "{{kafka_connect.systemd_override | dirname}}"
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{ kafka_connect.systemd_override }}"
    mode: 0640
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
  notify:
    - reload systemd
    - restart connect distributed

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart connect distributed
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Connect Service
  systemd:
    name: "{{kafka_connect_service_name}}"
    enabled: yes
    state: started
