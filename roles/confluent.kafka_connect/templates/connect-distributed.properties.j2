# Maintained by Ansible

{% for key, value in kafka_connect.properties.items() %}
{{key}}={{value}}
{% endfor %}

# Kafka Connect Configuration
listeners={{kafka_connect_http_protocol}}://0.0.0.0:{{kafka_connect_rest_port}}
rest.advertised.listener={{kafka_connect_http_protocol}}
rest.advertised.host.name={{inventory_hostname}}
rest.advertised.host.port={{kafka_connect_rest_port}}
{% if kafka_connect_ssl_enabled|bool %}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.keystore.location={{kafka_connect_keystore_path}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.keystore.password={{kafka_connect_keystore_storepass}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.key.password={{kafka_connect_keystore_keypass}}
{% if kafka_connect_ssl_mutual_auth_enabled|bool %}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.client.auth=false
listeners.{{kafka_connect_http_protocol|lower}}.ssl.truststore.location={{kafka_connect_truststore_path}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% endif %}
{% endif %}

# Kafka Broker Configuration
bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = '' %}
{% set listener = kafka_broker_listeners[kafka_connect_kafka_listener_name] %}
{% set truststore_path = kafka_connect_truststore_path %}
{% set truststore_storepass = kafka_connect_truststore_storepass %}
{% set keystore_path = kafka_connect_keystore_path %}
{% set keystore_storepass = kafka_connect_keystore_storepass %}
{% set keystore_keypass = kafka_connect_keystore_keypass %}
{% set sasl_plain_username = sasl_plain_users.kafka_connect.principal %}
{% set sasl_plain_password = sasl_plain_users.kafka_connect.password %}
{% set sasl_scram_username = sasl_scram_users.kafka_connect.principal %}
{% set sasl_scram_password = sasl_scram_users.kafka_connect.password %}
{% set kerberos_keytab_path = kafka_connect_kerberos_keytab_path %}
{% set kerberos_principal = kafka_connect_kerberos_principal %}
{% set oauth_username = kafka_connect_ldap_user %}
{% set oauth_password = kafka_connect_ldap_password %}
{% include 'kafka_client.j2' %}



{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
value.converter.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

key.converter.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% endif %}



# Connect Producer Configuration
producer.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'producer.' %}
{% include 'kafka_client.j2' %}


# Connect Consumer Configuration
consumer.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'consumer.' %}
{% include 'kafka_client.j2' %}



# Producer Monitoring Configuration
producer.confluent.monitoring.interceptor.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'producer.confluent.monitoring.interceptor.' %}
{% include 'kafka_client.j2' %}



# Consumer Monitoring Configuration
consumer.confluent.monitoring.interceptor.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

{% set config_prefix = 'consumer.confluent.monitoring.interceptor.' %}
{% include 'kafka_client.j2' %}



{% if rbac_enabled|bool %}
###################### RBAC and Secret Registry ######################
rest.extension.classes=io.confluent.connect.security.ConnectSecurityExtension{% if kafka_connect_secret_registry_enabled|bool %},io.confluent.connect.secretregistry.ConnectSecretRegistryExtension

config.providers=secret
config.providers.secret.class=io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider
config.providers.secret.param.master.encryption.key={{kafka_connect_secret_registry_key}}


config.providers.secret.param.kafkastore.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']}}{% endfor %}

config.providers.secret.param.kafkastore.security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
config.providers.secret.param.kafkastore.ssl.truststore.location={{kafka_connect_truststore_path}}
config.providers.secret.param.kafkastore.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
config.providers.secret.param.kafkastore.ssl.keystore.location={{kafka_connect_keystore_path}}
config.providers.secret.param.kafkastore.ssl.keystore.password={{kafka_connect_keystore_storepass}}
config.providers.secret.param.kafkastore.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
config.providers.secret.param.kafkastore.sasl.mechanism=PLAIN
config.providers.secret.param.kafkastore.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
   username="{{sasl_plain_users.kafka_connect.principal}}" password="{{sasl_plain_users.kafka_connect.password}}";
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
config.providers.secret.param.kafkastore.sasl.mechanism=GSSAPI
config.providers.secret.param.kafkastore.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
config.providers.secret.param.kafkastore.sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required \
   useKeyTab=true \
   storeKey=true \
   keyTab="{{kerberos.keytab_dir}}/{{kafka_connect_kerberos_keytab_path | basename}}" \
   principal="{{kafka_connect_kerberos_principal}}";
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
config.providers.secret.param.kafkastore.sasl.mechanism=SCRAM-SHA-256
config.providers.secret.param.kafkastore.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
   username="{{sasl_scram_users.kafka_connect.principal}}" password="{{sasl_scram_users.kafka_connect.password}}";
{% endif %}
{% endif %}


##################### RBAC #####################
### Authentication
rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler

# The path to a directory containing public keys that should be used to verify json web tokens
# during authentication
public.key.path={{rbac_enabled_public_pem_path}}

# location of metadata service
# For SSL settings connect will use top level ssl.* configs
confluent.metadata.bootstrap.server.urls={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}https://{{ host }}:8090{% endfor %}

# credentials to use with MDS
confluent.metadata.basic.auth.user.info={{kafka_connect_ldap_user}}:{{kafka_connect_ldap_password}}
confluent.metadata.http.auth.credentials.provider=BASIC

{% if mds_ssl_enabled|bool %}
############################ MDS TLS Settings #####################################
confluent.metadata.server.ssl.truststore.location={{kafka_connect_truststore_path}}
confluent.metadata.server.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if mds_ssl_mutual_auth_enabled|bool %}
confluent.metadata.server.ssl.keystore.location={{kafka_connect_keystore_path}}
confluent.metadata.server.ssl.keystore.password={{kafka_connect_keystore_keypass}}
confluent.metadata.server.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}

{% endif %}
