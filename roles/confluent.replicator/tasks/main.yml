---
- include_role:
    name: confluent.common
  when: not common_role_completed|bool

- name: Gather OS Facts
  setup:
    # Only gathers items in list, filters out the rest
    filter: "{{item}}"
    gather_subset:
      - '!all'
  loop:
    - ansible_os_family
    - ansible_fqdn

# Install Packages
- name: Install the Confluent Replicator Packages
  yum:
    name: "{{item}}{{confluent_package_redhat_suffix}}"
    state: latest
  loop: "{{confluent_replicator_packages}}"
  when:
    - ansible_os_family == "RedHat"
    - installation_method == "package"

- name: Install the Confluent Replicator Packages
  apt:
    name: "{{item}}{{confluent_package_debian_suffix}}"
  loop: "{{confluent_replicator_packages}}"
  when:
    - ansible_os_family == "Debian"
    - installation_method == "package"

# Configure environment
- name: Create Confluent Replicator Group
  group:
    name: "{{confluent_replicator_group}}"

- name: Create Confluent Replicator User
  user:
    name: "{{confluent_replicator_user}}"
    comment: "Confluent Replicator User"
    system: true
    group: "{{confluent_replicator_group}}"

- name: Configure TLS for Replicator Host
  include_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{confluent_replicator_truststore_storepass}}"
    truststore_path: "{{confluent_replicator_truststore_path}}"
    keystore_path: "{{confluent_replicator_keystore_path}}"
    keystore_storepass: "{{confluent_replicator_keystore_storepass}}"
    keystore_keypass: "{{confluent_replicator_keystore_keypass}}"
    service_name: confluent-replicator
    user: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host] | unique }}"
    ca_cert_path: "{{confluent_replicator_ca_cert_path}}"
    cert_path: "{{confluent_replicator_cert_path}}"
    key_path: "{{confluent_replicator_key_path}}"
    export_certs: "{{confluent_replicator_export_certs}}"
    ssl_ca_cert_file_path: "{{confluent_replicator_ssl_ca_cert_path}}"
    ssl_signed_cert_filepath: "{{confluent_replicator_ssl_cert_path}}"
    ssl_key_filepath: "{{confluent_replicator_ssl_key_path}}"
    ssl_key_password: "{{confluent_replicator_ssl_key_password}}"
    ssl_truststore_file_path: "{{confluent_replicator_ssl_truststore_file_path}}"
    ssl_keystore_file_path: "{{confluent_replicator_ssl_keystore_file_path}}"
  when: confluent_replicator_ssl_custom_certs|bool or confluent_replicator_ssl_provided_keystore_and_truststore|bool

- name: Configure TLS for Replicator Consumer
  include_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{confluent_replicator_consumer_truststore_storepass}}"
    truststore_path: "{{confluent_replicator_consumer_truststore_path}}"
    keystore_path: "{{confluent_replicator_consumer_keystore_path}}"
    keystore_storepass: "{{confluent_replicator_consumer_keystore_storepass}}"
    keystore_keypass: "{{confluent_replicator_consumer_keystore_keypass}}"
    service_name: confluent-replicator
    user: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host] | unique }}"
    ca_cert_path: "{{confluent_replicator_consumer_ca_cert_path}}"
    cert_path: "{{confluent_replicator_consumer_cert_path}}"
    key_path: "{{confluent_replicator_consumer_key_path}}"
    export_certs: "{{confluent_replicator_consumer_export_certs}}"
    ssl_ca_cert_file_path: "{{confluent_replicator_consumer_ssl_ca_cert_path}}"
    ssl_signed_cert_filepath: "{{confluent_replicator_consumer_ssl_cert_path}}"
    ssl_key_filepath: "{{confluent_replicator_consumer_ssl_key_path}}"
    ssl_key_password: "{{confluent_replicator_consumer_ssl_key_password}}"
    ssl_truststore_file_path: "{{confluent_replicator_consumer_ssl_truststore_file_path}}"
    ssl_keystore_file_path: "{{confluent_replicator_consumer_ssl_keystore_file_path}}"
  when: confluent_replicator_consumer_ssl_custom_certs|bool or confluent_replicator_consumer_ssl_provided_keystore_and_truststore|bool

- name: Configure TLS for Replicator Producer
  include_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{confluent_replicator_producer_truststore_storepass}}"
    truststore_path: "{{confluent_replicator_producer_truststore_path}}"
    keystore_path: "{{confluent_replicator_producer_keystore_path}}"
    keystore_storepass: "{{confluent_replicator_producer_keystore_storepass}}"
    keystore_keypass: "{{confluent_replicator_producer)keystore_keypass}}"
    service_name: confluent-replicator
    user: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host] | unique }}"
    ca_cert_path: "{{confluent_replicator_producer_ca_cert_path}}"
    cert_path: "{{confluent_replicator_producer_cert_path}}"
    key_path: "{{confluent_replicator_producer_key_path}}"
    export_certs: "{{confluent_replicator_producer_export_certs}}"
    ssl_ca_cert_file_path: "{{confluent_replicator_producer_ssl_ca_cert_path}}"
    ssl_signed_cert_filepath: "{{confluent_replicator_producer_ssl_cert_path}}"
    ssl_key_filepath: "{{confluent_replicator_producer_ssl_key_path}}"
    ssl_key_password: "{{confluent_replicator_producer_ssl_key_password}}"
    ssl_truststore_file_path: "{{confluent_replicator_producer_ssl_truststore_file_path}}"
    ssl_keystore_file_path: "{{confluent_replicator_producer_ssl_keystore_file_path}}"
  when: confluent_replicator_producer_ssl_custom_certs|bool or confluent_replicator_producer_ssl_provided_keystore_and_truststore|bool

- name: Configure TLS for Replicator Monitoring Interceptors
  include_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{confluent_replicator_monitoring_interceptor_truststore_storepass}}"
    truststore_path: "{{confluent_replicator_monitoring_interceptor_truststore_path}}"
    keystore_path: "{{confluent_replicator_monitoring_interceptor_keystore_path}}"
    keystore_storepass: "{{confluent_replicator_monitoring_interceptor_keystore_storepass}}"
    keystore_keypass: "{{confluent_replicator_monitoring_interceptor_keystore_keypass}}"
    service_name: confluent-replicator
    user: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
    hostnames: "{{ [inventory_hostname, ansible_fqdn, ansible_host, ansible_ssh_host] | unique }}"
    ca_cert_path: "{{confluent_replicator_monitoring_interceptor_ca_cert_path}}"
    cert_path: "{{confluent_replicator_monitoring_interceptor_cert_path}}"
    key_path: "{{confluent_replicator_monitoring_interceptor_key_path}}"
    export_certs: "{{confluent_replicator_monitoring_interceptor_export_certs}}"
    ssl_ca_cert_file_path: "{{confluent_replicator_monitoring_interceptor_ssl_ca_cert_path}}"
    ssl_signed_cert_filepath: "{{confluent_replicator_monitoring_interceptor_ssl_cert_path}}"
    ssl_key_filepath: "{{confluent_replicator_monitoring_interceptor_ssl_key_path}}"
    ssl_key_password: "{{confluent_replicator_monitoring_interceptor_ssl_key_password}}"
    ssl_truststore_file_path: "{{confluent_replicator_monitoring_interceptor_ssl_truststore_file_path}}"
    ssl_keystore_file_path: "{{confluent_replicator_monitoring_interceptor_ssl_keystore_file_path}}"
  when: confluent_replicator_monitoring_interceptor_ssl_custom_certs|bool or confluent_replicator_monitoring_interceptor_ssl_provided_keystore_and_truststore|bool

- name: Configure Kerberos for Replicator Host
  include_role:
    name: confluent.kerberos
  vars:
    kerberos_group: "{{confluent_replicator_group}}"
    kerberos_user: "{{confluent_replicator_user}}"
    kerberos_keytab_path: "{{confluent_replicator_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{confluent_replicator_keytab_path}}"
    kerberos_handler: "restart confluent-replicator"
  when: confluent_replicator_kerberos_principal is defined

- name: Configure Kerberos for Replicator Consumer
  include_role:
    name: confluent.kerberos
  vars:
    kerberos_group: "{{confluent_replicator_group}}"
    kerberos_user: "{{confluent_replicator_user}}"
    kerberos_keytab_path: "{{confluent_replicator_consumer_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{confluent_replicator_consumer_keytab_path}}"
    kerberos_handler: "restart confluent-replicator"
  when: confluent_replicator_consumer_kerberos_principal is defined

- name: Configure Kerberos for Replicator Producer
  include_role:
    name: confluent.kerberos
  vars:
    kerberos_group: "{{confluent_replicator_group}}"
    kerberos_user: "{{confluent_replicator_user}}"
    kerberos_keytab_path: "{{confluent_replicator_producer_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{confluent_replicator_producer_keytab_path}}"
    kerberos_handler: "restart confluent-replicator"
  when: confluent_replicator_producer_kerberos_principal is defined

- name: Configure Kerberos for Replicator Monitoring Interceptors
  include_role:
    name: confluent.kerberos
  vars:
    kerberos_group: "{{confluent_replicator_group}}"
    kerberos_user: "{{confluent_replicator_user}}"
    kerberos_keytab_path: "{{confluent_replicator_monitoring_interceptor_kerberos_keytab_path}}"
    kerberos_keytab_destination_path: "{{confluent_replicator_monitoring_interceptor_keytab_path}}"
    kerberos_handler: "restart confluent-replicator"
  when: confluent_replicator_monitoring_interceptor_kerberos_principal is defined

- name: Create Confluent Replicator Config directory
  file:
    path: "{{ confluent_replicator.replication_config_file | dirname }}"
    state: directory
    mode: 0750
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"

- name: Create Confluent Log4j Config
  template:
    src: replicator-log4j.properties.j2
    dest: "{{confluent_replicator.log4j_file}}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
  when: confluent_replicator_custom_log4j|bool

- name: Create Confluent Replicator Jolokia Config
  template:
    src: confluent_replicator_jolokia.properties.j2
    dest: "{{confluent_replicator_jolokia_config}}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
  when: confluent_replicator_jolokia_enabled|bool
  notify: restart confluent replicator

- name: Enable Secrets Protection
  include_role:
    name: confluent.common
    tasks_from: secrets_protection.yml
  vars:
    encrypt_passwords: "{{ confluent_replicator_secrets_protection_encrypt_passwords }}"
    properties: "{{ confluent_replicator_secrets_protection_encrypt_properties }}"
    config_path: "{{ confluent_replicator.config_file }}"
  when: confluent_replicator_secrets_protection_enabled|bool

- name: Deploy JMX Exporter Config File
  copy:
    src: "confluent_replicator.yml"
    dest: "{{confluent_replicator_jmxexporter_config_path}}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
  when: confluent_replicator_jmxexporter_enabled|bool

- name: Create Confluent Replicator Config
  template:
    src: confluent-replicator.properties.j2
    dest: "{{confluent_replicator.replication_config_file}}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"

- name: Create Confluent Replicator Consumer Config
  template:
    src: confluent-replicator-consumer.properties.j2
    dest: "{{confluent_replicator.consumer_config_file}}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"

- name: Create Confluent Replicator Producer Config
  template:
    src: confluent-replicator-producer.properties.j2
    dest: "{{confluent_replicator.producer_config_file}}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"

- name: Create Confluent Replicator Monitoring Interceptor Config
  template:
    src: confluent-replicator-interceptors.properties.j2
    dest: "{{confluent_replicator.interceptors_config_file}}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"

- name: Copy Confluent Replicator SystemD script
  template:
    src: kafka-connect-replicator.service.j2
    dest:  "{{confluent_replicator.systemd_file}}"
    mode: 0640
    owner: root
    group: root

- name: Create SystemD override directory
  file:
    path: /etc/systemd/system/kafka-connect-replicator.service.d
    state: directory
    mode: '0755'
  
- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{ confluent_replicator.systemd_override }}"
    mode: 0640
    owner: "{{confluent_replicator_user}}"
    group: "{{confluent_replicator_group}}"
  notify: restart confluent replicator

- name: Setup RBAC for Confluent Replicator Binary
  include_tasks: rbac_replicator.yml
  when: confluent_replicator_mds_enabled|bool

- name: Setup RBAC for Confluent Replicator Binary Consumer
  include_tasks: rbac_replicator_consumer.yml
  when: confluent_replicator_consumer_mds_enabled|bool

- name: Setup RBAC for Confluent Replicator Binary Producer
  include_tasks: rbac_replicator_producer.yml
  when: confluent_replicator_producer_mds_enabled|bool

- name: Setup RBAC for Confluent Replicator Binary Monitoring Interceptor
  include_tasks: rbac_replicator_monitoring.yml
  when: confluent_replicator_monitoring_interceptor_mds_enabled|bool

- name: Start Connect Service
  systemd:
    name: "{{confluent_replicator_service_name}}"
    enabled: true
    state: started

- name: Health Check
  include_tasks: health_check.yml
  when:
    - confluent_replicator_health_checks_enabled|bool
    - not ansible_check_mode
