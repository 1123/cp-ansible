### replicator-rhel
##
##  Tests replicator over plaintext on rhel
##
---
driver:
  name: docker
platforms:
  # - name: mds-ldap1
  #   hostname: mds-ldap1.confluent
  #   groups:
  #     - ldap_server
  #   image: geerlingguy/docker-centos7-ansible
  #   dockerfile: ../Dockerfile.j2
  #   command: ""
  #   volumes:
  #     - /sys/fs/cgroup:/sys/fs/cgroup:ro
  #   privileged: true
  #   networks:
  #     - name: confluent
  # MDS Zookeeper and Kafka
  # - name: mds-kerberos1
  #   hostname: mds-kerberos1.confluent
  #   groups:
  #     - kerberos_server
  #   image: geerlingguy/docker-centos7-ansible
  #   dockerfile: ../Dockerfile.j2
  #   command: ""
  #   volumes:
  #     - /sys/fs/cgroup:/sys/fs/cgroup:ro
  #   privileged: true
  #   networks:
  #     - name: confluent
  - name: mds-zookeeper1
    hostname: mds-zookeeper1.confluent
    groups:
      - zookeeper
      - mds
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker1
    hostname: mds-kafka-broker1.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-broker2
    hostname: mds-kafka-broker2.confluent
    groups:
      - kafka_broker
      - mds
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: mds-kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
      - mds
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # Cluster 2 goups, groupnames will be changed during converge phase
  - name: zookeeper1
    hostname: zookeeper1.confluent
    groups:
      - zookeeper2
      - cluster2
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker2
      - cluster2
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest2
      - cluster2
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: confluent-replicator1
    hostname: confluent_replicator1.confluent
    groups:
      - confluent_replicator2
      - cluster2
    image: geerlingguy/docker-centos7-ansible
    dockerfile: ../Dockerfile.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
provisioner:
  name: ansible
  config_options:
    defaults:
      hash_behaviour: merge
  playbooks:
    converge: multi_rbac_converge.yml
  inventory:
    group_vars:
      all:
        scenario_name: replicator-rhel

        ssl_enabled: true
        sasl_protocol: scram
        # kerberos_kafka_broker_primary: kafka
        # kerberos:
        #   realm: realm.example.com
        #   kdc_hostname: mds-kerberos1
        #   admin_hostname: mds-kerberos1
        
        # zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        # zookeeper_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/zookeeper-{{inventory_hostname}}.keytab"

        # kafka_broker_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        # kafka_broker_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/kafka_broker-{{inventory_hostname}}.keytab"

        # kafka_rest_kerberos_principal: "kafka_rest/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        # kafka_rest_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/mds-kafka_rest-{{inventory_hostname}}.keytab"

        # ssl_custom_certs: true
        # # Paths relative to all.yml
        # ssl_ca_cert_filepath: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/ca.crt"
        # ssl_signed_cert_filepath: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        # ssl_key_filepath: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        # ssl_key_password: keypass

        # rbac_enabled: true


      #   create_mds_certs: false
      #   token_services_public_pem_file: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/public.pem"
      #   token_services_private_pem_file: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/tokenKeypair.pem"

      #   kafka_broker_custom_listeners:
      #     client_listener:
      #       name: CLIENT
      #       port: 9093

        # mds_super_user: mds
        # mds_super_user_password: password

        # kafka_broker_ldap_user: kafka_broker
        # kafka_broker_ldap_password: password

        # schema_registry_ldap_user: schema_registry
        # schema_registry_ldap_password: password

        # kafka_connect_ldap_user: kafka_connect
        # kafka_connect_ldap_password: password

        # ksql_ldap_user: ksql
        # ksql_ldap_password: password

        # kafka_rest_ldap_user: kafka_rest
        # kafka_rest_ldap_password: password

        # control_center_ldap_user: control_center
        # control_center_ldap_password: password

        # rbac_component_additional_system_admins:
        #   - user1

      # mds:
      #   kafka_broker_custom_properties:
      #     ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
      #     ldap.com.sun.jndi.ldap.read.timeout: 3000
      #     ldap.java.naming.provider.url: ldaps://mds-ldap1:636
      #     ldap.java.naming.security.protocol: SSL
      #     ldap.ssl.truststore.location: /var/ssl/private/kafka_broker.truststore.jks
      #     ldap.ssl.truststore.password: confluenttruststorepass
      #     ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
      #     ldap.java.naming.security.credentials: password
      #     ldap.java.naming.security.authentication: simple
      #     ldap.user.search.base: OU=rbac,DC=example,DC=com
      #     ldap.group.search.base: OU=rbac,DC=example,DC=com
      #     ldap.user.name.attribute: uid
      #     ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
      #     ldap.group.name.attribute: cn
      #     ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
      #     ldap.user.object.class: account
       

      cluster2:
        # ssl_enabled: true
        sasl_protocol: scram
        # ssl_custom_certs: true
        # # Paths relative to all.yml
        # ssl_ca_cert_filepath: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/ca.crt"
        # ssl_signed_cert_filepath: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
        # ssl_key_filepath: "roles/confluent.test/molecule/{{scenario_name}}/generated_ssl_files/{{inventory_hostname}}-key.pem"
        # ssl_key_password: keypass

        # zookeeper_kerberos_principal: "zookeeper/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        # zookeeper_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/zookeeper-{{inventory_hostname}}.keytab"

        # kafka_broker_kerberos_principal: "{{kerberos_kafka_broker_primary}}/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        # kafka_broker_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/kafka_broker-{{inventory_hostname}}.keytab"

        # kafka_rest_kerberos_principal: "kafka_rest/{{inventory_hostname}}.confluent@{{kerberos.realm | upper}}"
        # kafka_rest_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/kafka_rest-{{inventory_hostname}}.keytab"
      #   external_mds_enabled: true

      #   mds_broker_bootstrap_servers: mds-kafka-broker1:9093
      #   mds_bootstrap_server_urls: https://mds-kafka-broker1:8090,https://mds-kafka-broker2:8090
      #   mds_broker_listener:
      #     ssl_enabled: true
      #     ssl_mutual_auth_enabled: true
      #     sasl_protocol: plain
     
      confluent_replicator:
        confluent_replicator_health_checks_enabled: false
        confluent_replicator_white_list: test-replicator-source
        confluent_replicator_bootstrap_servers: kafka-broker1:9092
        confluent_replicator_sasl_scram_username: confluent_replicator
        confluent_replicator_sasl_scram_password: confluent_replicator-secret
        # confluent_replicator_kerberos_principal: "replicator/confluent-replicator1.confluent@{{kerberos.realm | upper}}"
        # confluent_replicator_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/replicator1.keytab"
        confluent_replicator_consumer_bootstrap_servers: mds-kafka-broker1:9092
        confluent_replicator_consumer_sasl_scram_username: confluent_replicator
        confluent_replicator_consumer_sasl_scram_password: confluent_replicator-secret
        # confluent_replicator_consumer_kerberos_principal: "replicator/confluent-replicator1.confluent@{{kerberos.realm | upper}}"
        # confluent_replicator_consumer_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/replicator1.keytab"
        confluent_replicator_producer_bootstrap_servers: kafka-broker1:9092
        confluent_replicator_producer_sasl_scram_username: confluent_replicator
        confluent_replicator_producer_sasl_scram_password: confluent_replicator-secret
        # confluent_replicator_producer_kerberos_principal: "replicator/confluent-replicator1.confluent@{{kerberos.realm | upper}}"
        # confluent_replicator_producer_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/replicator1.keytab"
        confluent_replicator_monitoring_interceptor_bootstrap_servers: kafka-broker1:9092
        confluent_replicator_monitoring_interceptor_sasl_scram_username: confluent_replicator
        confluent_replicator_monitoring_interceptor_sasl_scram_password: confluent_replicator-secret
        # confluent_replicator_monitoring_interceptor_kerberos_principal: "replicator/confluent-replicator1.confluent@{{kerberos.realm | upper}}"
        # confluent_replicator_monitoring_interceptor_kerberos_keytab_path: "roles/confluent.test/molecule/{{scenario_name}}/keytabs/replicator1.keytab"


      # kerberos_server:
      #   realm_name: "{{ kerberos.realm | upper }}"

      #   keytab_output_directory: "{{scenario_name}}/keytabs"

      #   # Creates kerberos principals for both mds cluster and cluster2
      #   kerberos_principals:
      #     - principal: "zookeeper/mds-zookeeper1.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/zookeeper-mds-zookeeper1.keytab"
      #     - principal: "{{kerberos_kafka_broker_primary}}/mds-kafka-broker1.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/kafka_broker-mds-kafka-broker1.keytab"
      #     - principal: "{{kerberos_kafka_broker_primary}}/mds-kafka-broker2.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/kafka_broker-mds-kafka-broker2.keytab"
      #     - principal: "kafka_rest/mds-kafka-rest1.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/mds-kafka_rest-mds-kafka-rest1.keytab"
      #     - principal: "zookeeper/zookeeper1.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/zookeeper-zookeeper1.keytab"
      #     - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker1.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/kafka_broker-kafka-broker1.keytab"
      #     - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker2.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/kafka_broker-kafka-broker2.keytab"
      #     - principal: "{{kerberos_kafka_broker_primary}}/kafka-broker3.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/kafka_broker-kafka-broker3.keytab"
      #     - principal: "kafka_rest/kafka-rest1.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/kafka_rest-kafka-rest1.keytab"
      #     - principal: "replicator/confluent-replicator1.confluent@{{kerberos.realm | upper}}"
      #       keytab_path: "keytabs/replicator1.keytab"
      # ldap_server:
      #   # Paths relative to scenario
      #   ldaps_enabled: true
      #   ldaps_custom_certs: true
      #   ssl_custom_certs: true
      #   ssl_ca_cert_filepath: "{{scenario_name}}/generated_ssl_files/ca.crt"
      #   ssl_signed_cert_filepath: "{{scenario_name}}/generated_ssl_files/{{inventory_hostname}}-ca1-signed.crt"
      #   ssl_key_filepath: "{{scenario_name}}/generated_ssl_files/{{inventory_hostname}}-key.pem"

      #   ldap_admin_password: ldppassword

      #   ldap_rbac_group: rbac
      #   ldap_dc: example
      #   ldap_dc_extension: com

      #   ldap_users:
      #     - username: "{{kafka_broker_ldap_user}}"
      #       password: "{{kafka_broker_ldap_password}}"
      #       uid: 9999
      #       guid: 99
      #     - username: "{{schema_registry_ldap_user}}"
      #       password: "{{schema_registry_ldap_password}}"
      #       uid: 9998
      #       guid: 98
      #     - username: "{{kafka_connect_ldap_user}}"
      #       password: "{{kafka_connect_ldap_password}}"
      #       uid: 9997
      #       guid: 97
      #     - username: "{{ksql_ldap_user}}"
      #       password: "{{ksql_ldap_password}}"
      #       uid: 9996
      #       guid: 96
      #     - username: "{{control_center_ldap_user}}"
      #       password: "{{control_center_ldap_password}}"
      #       uid: 9995
      #       guid: 95
      #     - username: "{{kafka_rest_ldap_user}}"
      #       password: "{{kafka_rest_ldap_password}}"
      #       uid: 9994
      #       guid: 94
      #     - username: "{{mds_super_user}}"
      #       password: "{{mds_super_user_password}}"
      #       uid: 9993
      #       guid: 93
      #     - username: user1
      #       password: user1p
      #       uid: 9992
      #       guid: 92

verifier:
  name: ansible
lint: |
  set -e
  yamllint -c ../../.yamllint ../..
scenario:
  test_sequence:
    - lint
    - dependency
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    # - idempotence
    - side_effect
    - verify
    - cleanup
    - destroy
