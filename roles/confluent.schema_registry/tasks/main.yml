# Install Packages
- name: Install the Schema Registry Packages
  yum:
    name: "{{item}}{{confluent_package_redhat_suffix}}"
    state: latest
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the Schema Registry Packages
  apt:
    name: "{{item}}{{confluent_package_debian_suffix}}"
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: Schema Registry Group
  group:
    name: "{{schema_registry.group}}"

- name: Schema Registry User
  user:
    name: "{{schema_registry.user}}"
    comment: "Schema Registry User"
    system: yes
    group: "{{schema_registry.group}}"

- import_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{schema_registry_truststore_storepass}}"
    truststore_path: "{{schema_registry_truststore_path}}"
    keystore_path: "{{schema_registry_keystore_path}}"
    keystore_storepass: "{{schema_registry_keystore_storepass}}"
    keystore_keypass: "{{schema_registry_keystore_keypass}}"
  when: schema_registry_ssl_enabled|bool or kafka_broker_listeners[schema_registry_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool

- name: Create Keytabs Directory
  file:
    path: "{{kerberos.keytab_dir}}"
    group: "{{schema_registry.group}}"
    mode: '650'
    recurse: yes
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: Copy in Keytab File
  copy:
    src: "{{schema_registry_kerberos_keytab_path}}"
    dest: "{{kerberos.keytab_dir}}/{{schema_registry_kerberos_keytab_path | basename}}"
    mode: '600'
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: Get Kafka Cluster ID from Zookeeper
  delegate_to: "{{ groups['zookeeper'][0] }}"
  shell: |
    /bin/zookeeper-shell localhost:2181 get /cluster/id 2> /dev/null | grep version | jq -r .id
  register: cluster_id  
  when: rbac_enabled|bool 

- name: export certificate to pem format for MDS login to create user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
    openssl pkcs12 -in /var/ssl/private/kafka_broker.keystore.jks \
      -out /var/ssl/private/kafka_broker.keystore.pem \
      -passin pass:{{keystore_storepass}} -passout pass:{{keystore_storepass}}
  when: rbac_enabled|bool 

- name: Login to MDS to get Security Token
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -u "{{rbac_mtls_broker_admin}}":"{{rbac_mtls_broker_admin_password}}" -s http://localhost:8090/security/1.0/authenticate 2> /dev/null | grep auth_token | jq -r .auth_token
  register: rbac_token 
  when: rbac_enabled|bool

# - name: Grant role Security Admin to Schema Registry user
#   delegate_to: "{{ groups['kafka_broker'][0] }}"
#   delegate_facts: true
#   shell: |
#     curl http://'{{ groups['kafka_broker'][0] }}':8090/security/1.0/principals/User:{{rbac_mtls_schema_registry_user}}/roles/SystemAdmin -X POST -d '{ "clusters": {"kafka-cluster": "{{cluster_id.stdout}}"}}' -H "Content-Type: application/json" -H 'Authorization: Bearer"{{rbac_token.stdout}}"'
#   when: rbac_enabled|bool 


# - name: Grant schema registry ResourceOwner on the group that Schema Registry nodes use to coordinate across the cluster 
#   delegate_to: "{{ groups['kafka_broker'][0] }}"
#   delegate_facts: true
#   shell: |
#     curl http://'{{ groups['kafka_broker'][0] }}':8090/security/1.0/principals/User:{{rbac_mtls_schema_registry_user}}/roles/ResourceOwner -X POST -d '{ "clusters": {"schema-registry-cluster": "{{[schema-registry-{{groups['schema_registry'][0]}}]}}-{{schema_registry_listener_port}}"}}' -H "Content-Type: application/json" -H 'Authorization: Bearer"{{rbac_token.stdout}}"'
#   when: rbac_enabled|bool 

- name: Grant schema registry ResourceOwner on the group that Schema Registry nodes use to coordinate across the cluster 
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl http://'{{ groups['kafka_broker'][0] }}':8090/security/1.0/principals/User:{{rbac_mtls_schema_registry_user}}/roles/ResourceOwner -X POST -d '{ "clusters": {"schema-registry-cluster": "schema-registry-{{groups['schema_registry'][0]}}-{{schema_registry_listener_port}}"}}' -H "Content-Type: application/json" -H 'Authorization: Bearer"{{rbac_token.stdout}}"'
  when: rbac_enabled|bool 

# - name: Grant schema registry ResourceOwner on the kafka topic where schems are stored
#   delegate_to: "{{ groups['kafka_broker'][0] }}"
#   delegate_facts: true
#   shell: |
#     curl http://'{{ groups['kafka_broker'][0] }}':8090/security/1.0/principals/User:{{rbac_mtls_schema_registry_user}}/roles/ResourceOwner -X POST -d '{ "clusters": {"schema-registry-cluster": "{{schema-registry- groups['schema_registry'][0] }}-{{schema_registry_listener_port}}"}}' -H "Content-Type: application/json" -H 'Authorization: Bearer"{{rbac_token.stdout}}"'
#   when: rbac_enabled|bool 

# - name: Login to MDS to get Security Token 
#   uri:
#     url: http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/authenticate
#     url_username: "{{ rbac_mtls_broker_admin }}"
#     url_password: "{{rbac_mtls_broker_admin_password}}"
#     return_content: yes
#     force_basic_auth: yes
#     follow_redirects: yes
#   register: cluster_id
#   delegate_facts: True
#   delegate_to: "{{ groups['kafka_broker'][0] }}"
#   when: rbac_enabled|bool 

# - name: Grant role SecurityAdmin to Schema Registry user (Work in Progress )
#   uri:
#     url: http://{{ groups['kafka_broker'][0] }}:8090/principals/{{rbac_mtls_schema_registry_user}}/roles/SecurityAdmin
#     method: POST
#     body_format: json 
#     body: "{{ 'clusters':{'kafka-cluster':'{{cluster_id}}'','schema-registry-cluster':'{{schema-registry- groups['schema_registry'][0] }}-{{schema_registry_listener_port}}'}}"
#     status_code: 204
#   delegate_facts: True
#   delegate_to: "{{ groups['kafka_broker'][0] }}"
#   when: rbac_enabled|bool 

# - name: Grant schema registry ResourceOwner on the group that Schema Registry nodes use to coordinate across the cluster (Work in Progress)
#   uri:
#     url: http://{{ groups['kafka_broker'][0] }}:8090/principals/{{rbac_mtls_schema_registry_user}}/roles/ResourceOwner
#     method: POST
#     body_format: json 
#     body: {"scope": {"clusters": {"kafka-cluster": "{{cluster_id}}","schema-registry-cluster": "{{schema-registry- groups['schema_registry'][0] }}-{{schema_registry_listener_port}}"}},"resourcePatterns": [{"resourceType": "string","name": "string","patternType": "string"}]}
#     status_code: 204
#   delegate_facts: True
#   delegate_to: "{{ groups['kafka_broker'][0] }}"
#   when: rbac_enabled|bool 

# - name: Grant schema registry ResourceOwner on the kafka topic where schems are stored (Work IN progress)
#   uri:
#     url: http://{{ groups['kafka_broker'][0] }}:8090/principals/{{rbac_mtls_schema_registry_user}}/roles/ResourceOwner
#     method: POST
#     body_format: json 
#     body: "{{ 'clusters': {'kafka-cluster': '{{cluster_id}}'','schema-registry-cluster': '{{schema-registry- groups['schema_registry'][0] }}-{{schema_registry_listener_port}}'}}"
#     status_code: 204
#   delegate_facts: True
#   delegate_to: "{{ groups['kafka_broker'][0] }}"
#   when: rbac_enabled|bool 

- name: Remove exported pem file for MDS login
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
     rm -rf /var/ssl/private/kafka_broker.keystore.pem
  when: rbac_enabled|bool and ssl_enabled|bool

- name: Create Schema Registry Config
  template:
    src: schema-registry.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Logs Directory
  file:
    path: "{{schema_registry.appender_log_path}}"
    group: "{{schema_registry.group}}"
    owner: "{{schema_registry.user}}"
    mode: '764'
    recurse: yes

- name: Create Schema Registry log4j Config
  template:
    src: schema_registry_log4j.properties.j2
    dest: "{{schema_registry.log4j_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Service Override Directory
  file:
    path: "{{schema_registry.systemd_override | dirname}}"
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{schema_registry.systemd_override}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - reload systemd
    - restart schema-registry

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart schema-registry
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Schema Registry Service
  systemd:
    name: "{{schema_registry_service_name}}"
    enabled: yes
    state: started
