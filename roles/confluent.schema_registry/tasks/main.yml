# Install Packages
- name: Install the Schema Registry Packages
  yum:
    name: "{{item}}{{confluent_package_redhat_suffix}}"
    state: latest
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the Schema Registry Packages
  apt:
    name: "{{item}}{{confluent_package_debian_suffix}}"
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: Schema Registry Group
  group:
    name: "{{schema_registry.group}}"

- name: Schema Registry User
  user:
    name: "{{schema_registry.user}}"
    comment: "Schema Registry User"
    system: yes
    group: "{{schema_registry.group}}"

- import_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{schema_registry_truststore_storepass}}"
    truststore_path: "{{schema_registry_truststore_path}}"
    keystore_path: "{{schema_registry_keystore_path}}"
    keystore_storepass: "{{schema_registry_keystore_storepass}}"
    keystore_keypass: "{{schema_registry_keystore_keypass}}"
  when: schema_registry_ssl_enabled|bool or kafka_broker_listeners[schema_registry_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool

- name: Create Keytabs Directory
  file:
    path: "{{kerberos.keytab_dir}}"
    group: "{{schema_registry.group}}"
    mode: '650'
    recurse: yes
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: Copy in Keytab File
  copy:
    src: "{{schema_registry_kerberos_keytab_path}}"
    dest: "{{kerberos.keytab_dir}}/{{schema_registry_kerberos_keytab_path | basename}}"
    mode: '600'
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: export certificate to pem format for MDS login to create user
  delegate_to: {{ groups['kafka_broker'[0]] }}
  shell: |
    openssl pkcs12 -in /var/ssl/private/generation/{{ssl_self_signed_ca_cert_filename}} \
      -out /var/ssl/private/generation/{{ssl_self_signed_ca_cert_filename}}.pem \
      -passin pass:{{ssl_self_signed_ca_password}} -passout pass:{{ssl_self_signed_ca_password}}
  when: rbac_mtls_3_port:bool and ssl_enabled|bool

# - name: Login to MDS to create Schema Registry User
#   uri:
#     url: https://{{ groups['kafka_broker'[0]] }}:8090/security/1.0/authenticate
#     return_content: yes
#     client_cert:/var/ssl/private/generation/{{ssl_self_signed_ca_cert_filename}}.pem
#     user: {{ rbac_mtls_broker_admin }}
#     password: 
#     register: login
#   delegate_facts: True
#   delegate_to: {{ groups['kafka_broker'[0]] }}
#   when: rbac_mtls_3_port:bool 

# - name: Create Schema Registry user, using Token
#   uri:
#     url: https://{{ groups['kafka_broker'[0]] }}:8090/security/1.0/principals/User:{{rbac_mtls_broker_admin}}/roles/SystemAdmin
#     client_cert: /var/ssl/private/generation/{{ssl_self_signed_ca_cert_filename}}.pem
#     method: POST
#     return_content: yes
#     headers:
#       Cookie: "{{ login.set_cookie }}"
#   delegate_facts: True
#   delegate_to: {{ groups['kafka_broker'[0]] }}
#   when: rbac_mtls_3_port:bool 

- name: Remove exported pem file for MDS login
  delegate_to: {{ groups['kafka_broker'[0]] }}
  shell: |
    rm -rf /var/ssl/private/generation/{{ssl_self_signed_ca_cert_filename}}.pem
  when: rbac_mtls_3_port:bool and ssl_enabled|bool

- name: Create Schema Registry Config
  template:
    src: schema-registry.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Logs Directory
  file:
    path: "{{schema_registry.appender_log_path}}"
    group: "{{schema_registry.group}}"
    owner: "{{schema_registry.user}}"
    mode: '764'
    recurse: yes

- name: Create Schema Registry log4j Config
  template:
    src: schema_registry_log4j.properties.j2
    dest: "{{schema_registry.log4j_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Service Override Directory
  file:
    path: "{{schema_registry.systemd_override | dirname}}"
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{schema_registry.systemd_override}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - reload systemd
    - restart schema-registry

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart schema-registry
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Schema Registry Service
  systemd:
    name: "{{schema_registry_service_name}}"
    enabled: yes
    state: started
